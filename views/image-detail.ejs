<!-- views/image-detail.ejs -->

<!-- Removed the inline <style> block. All these styles are now in public/css/style.css -->

<div class="image-detail-container">

    <img src="<%= item.contentUrl %>" alt="Image" class="image-detail-image mb-4">
    <a href="<%= item.contentUrl %>" download="pixzor_image_<%= item.id %>.jpg" class="btn btn-primary w-full mb-2">Download</a>
    <div class="share-buttons">
        <a href="https://twitter.com/intent/tweet?url=<%= encodeURIComponent(url) %>&text=Check%20out%20this%20AI-generated%20image%20on%20Pixzor!" class="share-button twitter" target="_blank">
            <i class="fab fa-twitter"></i>
        </a>
        <a href="https://www.facebook.com/sharer/sharer.php?u=<%= encodeURIComponent(url) %>" class="share-button facebook" target="_blank">
            <i class="fab fa-facebook-f"></i>
        </a>
        <a href="https://pinterest.com/pin/create/button/?url=<%= encodeURIComponent(url) %>&media=<%= encodeURIComponent(item.contentUrl) %>&description=Check%20out%20this%20AI-generated%20image%20on%20Pixzor!" class="share-button pinterest" target="_blank">
            <i class="fab fa-pinterest-p"></i>
        </a>
        <a href="https://www.instagram.com/" class="share-button instagram" target="_blank">
            <i class="fab fa-instagram"></i>
        </a>
        <button class="share-button copy-link" onclick="navigator.clipboard.writeText('<%= url %>').then(() => alert('Link copied!'))">
            <i class="fas fa-link"></i>
        </button>
    </div>
    <h2 class="text-xl font-bold mb-2">Prompt:</h2>
    <p class="bg-gray-700 p-2 rounded mb-4"><%= item.prompt || 'No prompt available.' %></p>
    <h2 class="text-xl font-bold mb-2">Created by:</h2>
    <p class="mb-4"><%= item.user?.username || 'Unknown' %></p>
    <% if (item.model) { %>
    <h2 class="text-xl font-bold mb-2">Model:</h2>
    <p class="mb-4"><%= item.model %></p>
    <% } %>
    <h2 class="text-xl font-bold mb-2">Comments:</h2>
    <ul class="comments-list mb-4">
        <% if (item.comments && item.comments.length > 0) { %>
            <% item.comments.forEach(comment => { %>
                <li class="comment-item pb-2 mb-2">
                    <div class="flex items-center mb-1">
                        <img src="<%= comment.user.photo || '/images/default-avatar.png' %>" alt="<%= comment.user.username %>" class="w-6 h-6 rounded-full mr-2">
                        <span class="font-semibold text-sm mr-2"><%= comment.user.username %></span>
                        <span class="text-gray-400 text-xs"><%= new Date(comment.createdAt).toLocaleString() %></span>
                    </div>
                    <p class="text-gray-300 text-sm break-words"><%= comment.commentText %></p>
                </li>
            <% }); %>
        <% } else { %>
            <li class="text-gray-400 italic">No comments yet.</li>
        <% } %>
    </ul>
    <% if (isLoggedIn) { %>
    <form action="/api/content/<%= contentId %>/comments" method="POST" class="flex space-x-2">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <!-- Added ID here for JavaScript targeting -->
        <input type="text" id="commentText" name="commentText" placeholder="Write a comment..." class="flex-1 bg-gray-700 rounded px-4 py-2 text-gray-200" required>
        <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded">Post</button>
    </form>
    <% } else { %>
    <p class="text-gray-400">Login to comment.</p>
    <% } %>
</div>

<!-- NEW SCRIPT BLOCK FOR HANDLING COMMENTS -->
<!-- views/image-detail.ejs -->

<!-- ... (existing HTML and script up to the form submission listener) ... -->

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const commentForm = document.querySelector('.image-detail-container form');
        const commentInput = document.getElementById('commentText');
        const commentsList = document.querySelector('.comments-list');
        const isLoggedIn = window.isLoggedIn;
        const currentUser = window.currentUser; // Get currentUser from global scope
        const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content;

        if (!commentForm || !commentInput || !commentsList || !csrfToken) {
            console.error('Image detail comment form elements not found or CSRF token missing. Disabling comment input.');
            if (commentInput) commentInput.disabled = true;
            const postCommentBtn = document.querySelector('.image-detail-container button[type="submit"]');
            if (postCommentBtn) postCommentBtn.disabled = true;
            return;
        }

        if (!isLoggedIn) {
            commentInput.disabled = true;
            commentInput.placeholder = "Login to comment.";
            const postCommentBtn = document.querySelector('.image-detail-container button[type="submit"]');
            if (postCommentBtn) postCommentBtn.disabled = true;
        } else {
            commentInput.disabled = false;
            commentInput.placeholder = "Write a comment...";
            const postCommentBtn = document.querySelector('.image-detail-container button[type="submit"]');
            if (postCommentBtn) postCommentBtn.disabled = false;
        }

        commentForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            if (!isLoggedIn) {
                window.showToast('Please log in to post a comment.', 'error');
                return;
            }

            const commentText = commentInput.value.trim();
            if (!commentText) {
                window.showToast('Comment cannot be empty.', 'warning');
                return;
            }

            const postUrl = commentForm.action;

            try {
                const response = await fetch(postUrl, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    body: JSON.stringify({ commentText: commentText })
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || `Server error: ${response.status}`);
                }

                const result = await response.json();

                // --- CRITICAL CHANGE HERE ---
                // The server sends the comment object directly, not nested under 'comment'
                const newComment = result; // <-- CHANGED THIS LINE
                // --- END CRITICAL CHANGE ---

                window.showToast('Comment posted successfully!', 'success');
                commentInput.value = ''; // Clear input field

                // Use the user information from the *server's response* (newComment.user)
                // This is more robust as it guarantees the user data is exactly what was saved/retrieved.
                const userPhoto = newComment.user?.photo || '/images/default-avatar.png'; // Use newComment.user
                const userName = newComment.user?.username || 'Unknown User'; // Use newComment.user

                const commentItem = document.createElement('li');
                commentItem.classList.add('comment-item', 'pb-2', 'mb-2');
                commentItem.innerHTML = `
                    <div class="flex items-center mb-1">
                        <img src="${userPhoto}" alt="${userName}" class="w-6 h-6 rounded-full mr-2">
                        <span class="font-semibold text-sm mr-2">${userName}</span>
                        <span class="text-gray-400 text-xs">${new Date(newComment.createdAt).toLocaleString()}</span>
                    </div>
                    <p class="text-gray-300 text-sm break-words">${newComment.commentText}</p>
                `;

                const noCommentsMessage = commentsList.querySelector('.text-gray-400.italic');
                if (noCommentsMessage) {
                    commentsList.innerHTML = '';
                }

                commentsList.prepend(commentItem);
                commentsList.scrollTop = 0;

            } catch (error) {
                console.error('Error posting comment:', error);
                window.showToast(`Failed to post comment: ${error.message}`, 'error');
            }
        });
    });
</script>