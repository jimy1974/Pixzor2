===== server.js =====
require('dotenv').config({ path: require('path').resolve(__dirname, '.env') });
const express = require('express');
const path = require('path');
const fs = require('fs/promises');
const fsSync = require('fs');
const expressLayouts = require('express-ejs-layouts');
const session = require('express-session');
const passport = require('passport');
const { OpenAI } = require('openai');
const { Op } = require('sequelize');
const routes = require('./routes');
const authRoutes = require('./routes/auth');
const stripeRouter = require('./routes/stripe');
const paymentRouter = require('./routes/payment');
const apiRoutes = require('./routes/api');
const { v4: uuidv4 } = require('uuid');
const sharp = require('sharp');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const cookieParser = require('cookie-parser');
const csrf = require('csurf');

// Import configurations
const { RUNWARE_MODELS } = require('./config/modelsConfig');
const { PROMPT_BASED_STYLES } = require('./config/stylesConfig');

const db = require('./db'); // Reverted to use the root db.js
const { sequelize, User, GeneratedContent, ChatSession, ImageComment, ImageLike } = db; // Ensure all models from root db.js are destructured

const app = express();
const PORT = process.env.PORT || 3000;

// Session middleware
const sessionMiddleware = session({
    secret: process.env.SESSION_SECRET || 'your-secret',
    resave: false,
    saveUninitialized: false,
    cookie: { secure: process.env.NODE_ENV === 'production' } // Secure in production
});

// Middleware
app.use(cookieParser());

// Serve static files from 'public' directory
app.use(express.static('public', {
    setHeaders: (res, path) => {
        if (path.endsWith('.css')) {
            res.setHeader('Content-Type', 'text/css');
        }
    }
}));

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(sessionMiddleware);
app.use(passport.initialize());
app.use(passport.session());
app.use(csrf({ cookie: true }));
app.use(expressLayouts);
app.set('view engine', 'ejs');
app.set('views', './views');
app.set('layout', 'layouts/layout');

// Pass CSRF token and globals to all views
app.use((req, res, next) => {
    res.locals.csrfToken = req.csrfToken();
    res.locals.isLoggedIn = req.isAuthenticated();
    res.locals.user = req.user ? {
        id: req.user.id,
        username: req.user.username,
        email: req.user.email,
        credits: req.user.credits,
        photo: req.user.photo
    } : null;
    res.locals.runwareModels = RUNWARE_MODELS; // From modelsConfig.js
    res.locals.promptBasedStyles = PROMPT_BASED_STYLES; // From stylesConfig.js
    next();
});

// Static file serving
app.use('/images', express.static(path.join(__dirname, 'public', 'images')));
app.use('/videos', express.static(path.join(__dirname, 'public', 'videos')));
const generatedImagesPath = path.join(__dirname, 'public', 'images', 'generated');
fs.mkdir(generatedImagesPath, { recursive: true })
    .then(() => console.log(`Ensured generated images directory exists: ${generatedImagesPath}`))
    .catch(err => console.error(`Error creating generated images directory ${generatedImagesPath}:`, err));
app.use('/images/generated', express.static(generatedImagesPath));

// Ensure Runware upload directory exists
const RUNWARE_UPLOAD_DIR = path.join(__dirname, 'public', 'uploads', 'generated_images');
if (!fsSync.existsSync(RUNWARE_UPLOAD_DIR)) {
    try {
        fsSync.mkdirSync(RUNWARE_UPLOAD_DIR, { recursive: true });
        console.log(`Created Runware upload directory: ${RUNWARE_UPLOAD_DIR}`);
    } catch (err) {
        console.error(`Error creating Runware upload directory ${RUNWARE_UPLOAD_DIR}:`, err);
    }
}

// Qwen clients
const qwen = new OpenAI({
    apiKey: process.env.QWEN_API_KEY,
    baseURL: 'https://dashscope-intl.aliyuncs.com/compatible-mode/v1',
});
const qwenIntent = new OpenAI({
    apiKey: process.env.QWEN_API_KEY,
    baseURL: 'https://dashscope-intl.aliyuncs.com/compatible-mode/v1',
});

// Routes
app.use('/', routes);
app.use('/', authRoutes);
app.use('/payment', paymentRouter);
app.use('/generate', require('./routes/generate'));
app.use('/partials', require('./routes/partials'));
app.use('/api', apiRoutes);
// app.use('/webhook', stripeRouter); // Uncomment when needed

// Intent detection with title suggestion
async function detectIntentAndTitle(userMessage) {
    const response = await qwenIntent.chat.completions.create({
        model: 'qwen-turbo',
        messages: [
            {
                role: 'system',
                content: "Analyze the user's message. Return a JSON object with: \"intent\" (\"greeting\", \"image_request\", \"other\") and \"title\" (a concise, descriptive chat title based on the message). Example: {\"intent\": \"greeting\", \"title\": \"Casual Hello\"}"
            },
            { role: 'user', content: userMessage }
        ],
        max_tokens: 50,
        temperature: 0.1,
    });
    return JSON.parse(response.choices[0].message.content.trim());
}

// Passport serialization
passport.serializeUser((user, done) => done(null, user.id));
passport.deserializeUser(async (id, done) => {
    try {
        const user = await User.findByPk(id, { attributes: ['id', 'username', 'email', 'googleId', 'credits', 'photo'] });
        done(null, user);
    } catch (err) {
        done(err, null);
    }
});

// API routes logging
app.use((req, res, next) => {
    console.log(`[Request] ${req.method} ${req.url} at ${new Date().toISOString()}`);
    next();
});

// Main app routes
// server.js (replace the existing app.get(['/', '/gallery', '/chat-history', '/files']) route)
app.get('/', async (req, res) => {
    try {
        console.log(`[Server] Rendering index.ejs for homepage`);
        res.render('index', {
            title: 'Pixzor',
            description: 'Create AI movies, images, and chat with Pixzor'
        });
    } catch (error) {
        console.error('[Server] Error rendering index.ejs:', error.stack);
        res.status(500).send('Internal Server Error');
    }
});



app.get('/chat-history', async (req, res) => {
    try {
        console.log(`[Server] Rendering chat_history.ejs for /chat-history`);
        if (!req.isAuthenticated()) {
            return res.render('partials/login_prompt', {
                layout: 'layouts/layout',
                title: 'Chat History - Pixzor',
                description: 'Log in to view your chat history on Pixzor',
                message: 'Please log in to view your chat history.'
            });
        }
        const chats = await ChatSession.findAll({
            where: { userId: req.user.id },
            order: [['updatedAt', 'DESC']],
            limit: 50
        });
        res.render('partials/chat_history', {
            layout: 'layouts/layout',
            title: 'Chat History - Pixzor',
            description: 'View your chat history on Pixzor',
            chats: chats.map(chat => ({
                id: chat.id,
                title: chat.title,
                timestamp: chat.updatedAt
            }))
        });
    } catch (error) {
        console.error('[Server] Error rendering chat_history.ejs:', error.stack);
        res.status(500).render('error', {
            layout: 'layouts/layout',
            title: 'Server Error',
            message: 'Failed to load chat history.',
            includeChat: false
        });
    }
});

app.get('/chat-history/:id', async (req, res) => {
    try {
        console.log(`[Server] Rendering chat_history.ejs for /chat-history/${req.params.id}`);
        if (!req.isAuthenticated()) {
            return res.render('partials/login_prompt', {
                layout: 'layouts/layout',
                title: 'Chat History - Pixzor',
                description: 'Log in to view your chat history on Pixzor',
                message: 'Please log in to view this chat.'
            });
        }
        const chat = await ChatSession.findOne({
            where: { id: req.params.id, userId: req.user.id }
        });
        if (!chat) {
            return res.status(404).render('error', {
                layout: 'layouts/layout',
                title: 'Chat Not Found',
                message: 'The requested chat could not be found.',
                includeChat: false
            });
        }
        let messages = [];
        if (chat.historyGcsUrl) {
            const downloadedHistory = await require('./utils/gcsUtils').downloadJsonFromGcs(chat.historyGcsUrl);
            if (downloadedHistory) {
                messages = downloadedHistory;
            }
        }
        res.render('partials/chat_history', {
            layout: 'layouts/layout',
            title: `Chat: ${chat.title} - Pixzor`,
            description: `View chat history: ${chat.title} on Pixzor`,
            chats: [{ id: chat.id, title: chat.title, timestamp: chat.updatedAt }],
            selectedChat: { id: chat.id, title: chat.title, messages }
        });
    } catch (error) {
        console.error('[Server] Error rendering chat_history.ejs:', error.stack);
        res.status(500).render('error', {
            layout: 'layouts/layout',
            title: 'Server Error',
            message: 'Failed to load chat.',
            includeChat: false
        });
    }
});

app.get('/files', async (req, res) => {
    try {
        console.log(`[Server] Rendering files.ejs for /files`);
        if (!req.isAuthenticated()) {
            return res.render('partials/login_prompt', {
                layout: 'layouts/layout',
                title: 'Files - Pixzor',
                description: 'Log in to view your files on Pixzor',
                message: 'Please log in to view your files.'
            });
        }
        const files = await GeneratedContent.findAll({
            where: { userId: req.user.id },
            order: [['createdAt', 'DESC']],
            limit: 50
        });
        res.render('partials/files', {
            layout: 'layouts/layout',
            title: 'Files - Pixzor',
            description: 'View your generated files on Pixzor',
            files: files.map(file => ({
                id: file.id,
                type: file.type,
                contentUrl: file.contentUrl,
                thumbnailUrl: file.thumbnailUrl || file.contentUrl,
                prompt: file.prompt,
                createdAt: file.createdAt
            }))
        });
    } catch (error) {
        console.error('[Server] Error rendering files.ejs:', error.stack);
        res.status(500).render('error', {
            layout: 'layouts/layout',
            title: 'Server Error',
            message: 'Failed to load files.',
            includeChat: false
        });
    }
});

// API user info
app.get('/api/user-info', (req, res) => {
    if (req.isAuthenticated()) {
        res.json({
            id: req.user.id,
            username: req.user.username,
            email: req.user.email,
            credits: req.user.credits,
            photo: req.user.photo
        });
    } else {
        res.status(401).json({ error: 'Please log in.' });
    }
});

// Chat History routes
app.get('/api/library/chats', async (req, res) => {
    try {
        const userId = req.user ? req.user.id : null;
        console.log(`[API Chat History] Fetching chats for User ID: ${userId}, Session ID: ${req.sessionID}, Cookies:`, req.cookies);

        if (!userId || !req.isAuthenticated()) {
            console.log('[API Chat History] No authenticated user');
            return res.json({ items: [], message: 'Please log in to view your chat history.' });
        }

        const chats = await ChatSession.findAll({
            where: { userId },
            order: [['updatedAt', 'DESC']],
            limit: 50
        });

        console.log(`[API Chat History] Found ${chats.length} chats for User ID: ${userId}`);
        res.json({
            items: chats.map(chat => ({
                id: chat.id,
                title: chat.title,
                timestamp: chat.updatedAt
            }))
        });
    } catch (err) {
        console.error('[API Chat History] Error fetching chat history:', err.stack);
        res.status(500).json({ items: [], message: 'Error loading chat history.' });
    }
});



app.post('/api/add-generated-image', async (req, res) => {
  try {
    const token = req.headers.authorization?.split('Bearer ')[1];
    if (process.env.WEBSITE_API_TOKEN && token !== process.env.WEBSITE_API_TOKEN) {
      console.log('[API Add Image] Unauthorized access attempt');
      return res.status(401).json({ success: false, error: 'Unauthorized' });
    }

    const {
      userId,
      contentUrl,
      prompt,
      modelUsed,
      modelId,
      width,
      height,
      apiResponseId
    } = req.body;

    if (!userId || !contentUrl || !prompt) {
      console.log('[API Add Image] Missing required fields:', req.body);
      return res.status(400).json({ success: false, error: 'Missing required fields' });
    }

    const newContent = await GeneratedContent.create({
      userId,
      type: 'image',
      contentUrl,
      prompt,
      modelUsed,
      modelId,
      width,
      height,
      apiResponseId,
      isPublic: false,
      tokenCost: 1 // Adjust based on your pricing
    });

    console.log(`[API Add Image] Saved image record with ID: ${newContent.id}`);
    res.json({ success: true, imageId: newContent.id });
  } catch (error) {
    console.error('[API Add Image] Error:', error.stack);
    res.status(500).json({ success: false, error: 'Failed to add image to database' });
  }
});

const { downloadJsonFromGcs } = require('./utils/gcsUtils');
app.get('/api/library/chats/:id', async (req, res) => {
    try {
        const userId = req.user ? req.user.id : null;
        const chatId = req.params.id;
        console.log(`[API Chat] Fetching chat ID: ${chatId} for User ID: ${userId}`);

        if (!userId || !req.isAuthenticated()) {
            console.log('[API Chat] No authenticated user');
            return res.status(401).json({ message: 'Please log in.' });
        }

        const chat = await ChatSession.findOne({ where: { id: chatId, userId } });
        if (!chat) {
            console.log(`[API Chat] Chat ID: ${chatId} not found for User ID: ${userId}`);
            return res.status(404).json({ message: 'Chat not found.' });
        }

        let messages = [];
        if (chat.historyGcsUrl) {
            console.log(`[API Chat] Found GCS URL: ${chat.historyGcsUrl}. Attempting download...`);
            const downloadedHistory = await downloadJsonFromGcs(chat.historyGcsUrl);
            if (downloadedHistory) {
                messages = downloadedHistory;
            } else {
                console.warn(`[API Chat] Failed to download or parse history from ${chat.historyGcsUrl} for chat ID ${chatId}`);
            }
        } else {
            console.log(`[API Chat] No GCS URL found for chat ID ${chatId}. Returning empty history.`);
        }

        res.json({ title: chat.title, messages });
    } catch (err) {
        console.error('[API Chat] Error fetching chat messages:', err.stack);
        res.status(500).json({ message: 'Error loading chat messages.' });
    }
});

app.delete('/api/library/chats/:chatId', async (req, res) => {
    const chatId = req.params.chatId;
    const userId = req.user ? req.user.id : null;
    console.log(`[API Chat History] DELETE request for chat ID: ${chatId} by User ID: ${userId}`);

    if (!userId || !req.isAuthenticated()) {
        console.log('[API Chat History] No authenticated user');
        return res.status(401).json({ message: 'Unauthorized' });
    }

    let transaction;
    try {
        transaction = await sequelize.transaction();

        const deletedMessagesCount = await ChatMessage.destroy({
            where: { chatSessionId: chatId },
            transaction
        });
        console.log(`[API Chat History] Deleted ${deletedMessagesCount} messages for chat ID: ${chatId}`);

        const deletedChatCount = await ChatSession.destroy({
            where: { id: chatId, userId },
            transaction
        });

        await transaction.commit();

        if (deletedChatCount > 0) {
            console.log(`[API Chat History] Successfully deleted chat ID: ${chatId}`);
            res.status(200).json({ message: 'Chat deleted successfully.' });
        } else {
            console.log(`[API Chat History] Chat ID: ${chatId} not found or user ${userId} not authorized`);
            res.status(404).json({ message: 'Chat not found or you do not have permission to delete it.' });
        }
    } catch (error) {
        console.error(`[API Chat History] Error deleting chat ID ${chatId}:`, error.stack);
        if (transaction) await transaction.rollback();
        res.status(500).json({ message: 'Failed to delete chat.' });
    }
});

// Error handling middleware
app.use((err, req, res, next) => {
    console.error('[Server] Error:', err.stack);
    if (err.code === 'EBADCSRFTOKEN') {
        res.status(403).send('Invalid CSRF token');
    } else {
        res.status(500).render('error', {
            layout: 'layouts/layout',
            title: 'Server Error',
            message: 'Something went wrong on the server.',
            includeChat: false
        });
    }
});

// Server startup
(async () => {
    try {
        await sequelize.authenticate();
        console.log('Database connection established successfully.');
        await sequelize.sync({ alter: false });
        console.log('[DB Sync] Database synced successfully with alter option.');

        const { startCleanupSchedule } = require('./utils/cleanupService');
        startCleanupSchedule();

        const server = app.listen(PORT, () => {
            console.log(`Server is running on port ${PORT}`);
        });

        const { initializeWebSocket } = require('./utils/websocketHandler');
        initializeWebSocket(server);
    } catch (err) {
        console.error('Database connection or sync failed:', err);
        process.exit(1);
    }
})();

// Export session middleware for WebSocket
module.exports.sessionMiddleware = sessionMiddleware;

===== public\js\chat-tab.js =====
// public/js/chat-tab.js
console.log('chat-tab.js: Script loaded.');

// Keep track of which scripts are loaded for different tabs if needed
// (Currently create-tab.js seems loaded globally via layout.ejs preload/script tag)
// const tabScripts = {
//     'create-images': '/js/create-tab.js',
//     'create-videos': '/js/create-videos-tab.js' // Example
// };
// const loadedScripts = new Set();

// function loadTabScriptIfNeeded(tabName) {
//     if (!loadedScripts.has(tabName) && tabScripts[tabName]) {
//         console.log(`[Chat Tab] Loading script for: ${tabName}`);
//         const script = document.createElement('script');
//         script.src = tabScripts[tabName];
//         script.onload = () => loadedScripts.add(tabName);
//         script.onerror = () => console.error(`Failed to load ${tabName} script`);
//         document.body.appendChild(script);
//     }
// }

function setupChat() {
    console.log("[Chat Tab] Attempting setupChat...");
    const contentArea = document.getElementById('chat-messages'); // Main message display area
    const chatSubmit = document.querySelector('#chat-submit[data-mode="chat-talk"]');
    const input = document.querySelector('#chat-talk-input');

    // Prevent attaching listeners multiple times
    if (!chatSubmit || chatSubmit.dataset.listenerAttached === 'true') {
        if (!chatSubmit) console.log("[Chat Tab] setupChat: chatSubmit button not found.");
        // else console.log("[Chat Tab] setupChat: Listener already attached.");
        return; // Don't attach listener if button missing or already attached
    }

    console.log("[Chat Tab] Found chat elements, attaching listener:", { chatSubmit, input });
    chatSubmit.dataset.listenerAttached = 'true'; // Mark as attached

    // --- Add auto-resize listener for the textarea ---
    if (input && input.tagName === 'TEXTAREA') { // Ensure it's a textarea
        input.addEventListener('input', () => {
            input.style.height = 'auto'; // Reset height to recalculate
            // Set height to scrollHeight, capped by CSS max-height
            input.style.height = `${input.scrollHeight}px`; 
        });
        // Trigger resize on initial load in case there's pre-filled text (unlikely here)
        // input.dispatchEvent(new Event('input')); 
    }
    // --- End auto-resize listener ---

    let currentChatSessionId = null; // Variable to hold the unique ID for the current chat session in this tab

    chatSubmit.addEventListener('click', () => {
        console.log("[Chat Tab] Chat submit clicked.");
        const message = input?.value.trim();
        const contentArea = document.getElementById('chat-messages'); // Re-get content area here for safety

        // Ensure contentArea exists before trying to modify it
        if (!contentArea) {
            console.error("[Chat Tab] Cannot find #chat-messages to clear/append.");
            return;
        }

        if (!window.isLoggedIn) {
            window.showToast('Please log in to send messages!', 'info');
            // Storing might be complex if user navigates away, simplify for now
            // localStorage.setItem('pendingChatMessage', message);
            // setTimeout(() => window.location.href = '/auth/google', 1000);
            return;
        }

        if (message && input) {
             // --- Clear area ONLY if it hasn't been cleared yet for this session ---
             if (!window.isChatAreaClearedForSession) {
                 console.log("[Chat Tab] First chat message in session, clearing content area.");
                 contentArea.innerHTML = '';
                 window.isChatAreaClearedForSession = true;
             }
             // --- End clear logic ---

             // Generate a session ID if this is the first message in this tab instance
             if (!currentChatSessionId) {
                currentChatSessionId = `chat_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;
                console.log('[Chat Tab] New Chat Session ID generated:', currentChatSessionId);
                // Clear any old messages when starting a new session ID
                if (contentArea) contentArea.innerHTML = '';
            }

             // --- Re-enabled adding user message visually --- 
             const userDiv = document.createElement('div');
             userDiv.classList.add('chat-message', 'user');
             // Basic text insertion, consider sanitizing if needed
             userDiv.textContent = message; 
             contentArea.appendChild(userDiv);
             contentArea.scrollTop = contentArea.scrollHeight;
             // --- End re-enabled code ---

            console.log("[Chat Tab] Sending message via WebSocket:", message);
            window.sendChatMsg({ 
                type: 'chat', 
                message: message,
                chatSessionId: currentChatSessionId // Include the session ID
            }); // Use core.js function
            input.value = '';
        } else {
            console.log("[Chat Tab] No message entered.");
        }
    });

    // Existing WebSocket message handling should be in core.js, not duplicated here.
    // Remove ws.onmessage handler from here if it exists in core.js
}

// Initialize tabs and potentially the default chat setup
document.addEventListener('DOMContentLoaded', () => {
    // Flag to track if the main chat area has been cleared for the current "session"
    // A "session" resets when non-chat content is loaded into #chat-messages
    window.isChatAreaClearedForSession = false;

    console.log('[Chat Tab] DOMContentLoaded event.');
    const chatTabsContainer = document.querySelector('.chat-tabs');
    const chatTabContent = document.getElementById('chat-tab-content'); // Container for sub-content divs

    if (!chatTabsContainer || !chatTabContent) {
        console.error("[Chat Tab] Could not find .chat-tabs or #chat-tab-content");
        return;
    }

    const chatTalkContent = document.getElementById('chat-talk');
    const createImagesContent = document.getElementById('create-images-content');
    // Add video content div reference if it exists
    // const createVideosContent = document.getElementById('create-videos-content');

    if (!chatTalkContent || !createImagesContent) {
         console.error("[Chat Tab] Could not find #chat-talk or #create-images-content divs.");
         return;
    }

    // Setup tab switching
    chatTabsContainer.addEventListener('click', (event) => {
        const clickedTab = event.target.closest('.chat-tab');
        if (!clickedTab) return; // Ignore clicks that aren't on a tab

        const tabName = clickedTab.dataset.tab;
        console.log(`[Chat Tab] Tab clicked: ${tabName}`);

        // Update active tab style
        chatTabsContainer.querySelectorAll('.chat-tab').forEach(t => t.classList.remove('active'));
        clickedTab.classList.add('active');

        // --- Simplified Visibility Toggle --- 
        // Deactivate all content areas first
        chatTalkContent.classList.remove('active');
        createImagesContent.classList.remove('active');
        // if (createVideosContent) { createVideosContent.classList.remove('active'); }

        // Activate the selected sub-content area
        if (tabName === 'chat') {
            chatTalkContent.classList.add('active');
            // Don't explicitly clear here. Let the 'send' logic handle it if needed.
            setupChat(); // Ensure chat listener is attached
        } else if (tabName === 'create-images') {
            createImagesContent.classList.add('active');
             // Clear content and reset the flag, as we are leaving the chat flow
             document.getElementById('chat-messages').innerHTML = ''; 
             window.isChatAreaClearedForSession = false; // Reset flag
        } else if (tabName === 'create-videos') {
            // Handle video tab - maybe show a message
            window.showToast('Video creation is not yet available.', 'info');
             // Clear main content area - Keep this clear for unimplemented tabs
             // Clear content and reset the flag
             document.getElementById('chat-messages').innerHTML = ''; 
             window.isChatAreaClearedForSession = false; // Reset flag
        }
        // --- End Simplified Visibility Toggle ---
    });

    // Initial setup: Ensure chat is set up if it's the default active tab
    const initialActiveTab = chatTabsContainer.querySelector('.chat-tab.active');
    if (initialActiveTab && initialActiveTab.dataset.tab === 'chat') {
        console.log('[Chat Tab] Initializing chat setup.');
        // Flag is initially false. First send click will clear if needed.
        setupChat();
    } else if (initialActiveTab && initialActiveTab.dataset.tab === 'create-images') {
        // Pre-clear content area if starting on image tab
        document.getElementById('chat-messages').innerHTML = ''; 
        window.isChatAreaClearedForSession = false; // Ensure flag is false
    } else {
        // Default initial load (advert) - flag is already false.
    }
});

===== public\js\core.js =====
document.addEventListener('DOMContentLoaded', () => {
    // Add popstate handler (unchanged)
    window.addEventListener('popstate', (event) => {
        console.log('[Popstate] Handling popstate event:', event.state, 'URL:', window.location.pathname);

        const modal = document.getElementById('comments-modal');
        if (event.state && event.state.modal && modal && !modal.classList.contains('hidden')) {
            console.log('[Popstate] Closing modal without reload');
            modal.classList.add('hidden');
            window.currentContentId = null; // Reset global from gallery.js
            return;
        }

        const path = window.location.pathname;
        const contentArea = document.getElementById('chat-messages') || document.getElementById('content-area');
        if (!contentArea) {
            console.error('[Popstate] Content area not found');
            return;
        }

        if (path === '/files') {
            console.log('[Popstate] Loading Files section');
            contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Loading files...</p>';
            fetch('/api/files')
                .then(response => response.json())
                .then(data => {
                    let html = data.items && data.items.length > 0
                        ? `<div id="file-list" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 p-4">
                            ${data.items.map(item => `
                                <div class="file-card relative group cursor-pointer aspect-square" data-id="${item.id}">
                                    <img src="${item.image}" alt="File thumbnail" class="w-full h-full object-cover rounded-lg" loading="lazy">
                                    <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-opacity duration-200 ease-in-out rounded-lg"></div>
                                </div>
                            `).join('')}
                           </div>`
                        : '<p class="text-center text-gray-400 p-4">No files yet.</p>';
                    contentArea.innerHTML = html;
                })
                .catch(error => {
                    console.error('[Popstate] Error loading files:', error);
                    contentArea.innerHTML = `<p class="text-center text-red-500 p-4">Error loading files: ${error.message}</p>`;
                });
        } else if (path === '/gallery') {
            console.log('[Popstate] Triggering Gallery initialization');
            if (window.initializeGallery) {
                initializeGallery();
            } else {
                console.error('[Popstate] initializeGallery not available');
                contentArea.innerHTML = '<p class="text-center text-red-500 p-4">Error loading gallery.</p>';
            }
        } else if (path.match(/^\/image\/\d+$/)) {
            console.log('[Popstate] Image route detected, checking modal state');
            if (!event.state || !event.state.modal) {
                console.log('[Popstate] Reloading for direct image access');
                window.location.reload();
            }
        }
    });

    console.log('[core.js] Page loaded, checking modals...');
    const modals = document.querySelectorAll('.modal');
    modals.forEach(modal => {
        console.log(`[core.js] Modal ${modal.id}: display=${getComputedStyle(modal).display}, hidden=${modal.classList.contains('hidden')}`);
        const observer = new MutationObserver(mutations => {
            mutations.forEach(mutation => {
                if (mutation.attributeName === 'class') {
                    console.log(`[core.js] Modal ${modal.id} hidden class changed: ${modal.classList.contains('hidden')}`);
                }
            });
        });
        observer.observe(modal, { attributes: true });
    });
});

// Log any modal display changes (unchanged)
window.addEventListener('load', () => {
    console.log('[core.js] Window loaded, final modal states:');
    document.querySelectorAll('.modal').forEach(modal => {
        console.log(`[core.js] Modal ${modal.id}: display=${getComputedStyle(modal).display}, hidden=${modal.classList.contains('hidden')}`);
    });
});

// WebSocket (unchanged)
const protocol = window.location.protocol === 'http:' ? 'ws://' : 'wss://';
const ws = new WebSocket(`${protocol}${window.location.host}`);

ws.onopen = () => console.log('WebSocket connected');
ws.onerror = (error) => console.error('WebSocket error:', error);
ws.onclose = (event) => console.log('WebSocket disconnected:', event.code, event.reason);

function sendChatMsg(messageObject) {
    if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify(messageObject));
    } else {
        console.error('WebSocket is not open. ReadyState:', ws.readyState);
        showToast('Connection lost. Please refresh.', 'error');
    }
}

ws.onmessage = (event) => {
    const data = JSON.parse(event.data);
    const chatMessages = document.getElementById('chat-messages');

    console.log('[WebSocket Received]', data);

    const oldStatus = chatMessages?.querySelector('.chat-message.status');
    if (oldStatus && data.type !== 'status') {
        oldStatus.remove();
    }

    if (data.type === 'error') {
        showToast(data.message, 'error');
        const statusMsg = chatMessages?.querySelector('.chat-message.status');
        if (statusMsg) statusMsg.remove();
    } else if (data.type === 'messageChunk' && data.sender === 'bot') {
        let lastBotMessage = chatMessages.querySelector('.chat-message.bot-message:last-child:not(.image-message)');
        if (!lastBotMessage) {
            lastBotMessage = document.createElement('div');
            lastBotMessage.classList.add('chat-message', 'bot-message');
            lastBotMessage.dataset.rawMarkdown = '';
            chatMessages.appendChild(lastBotMessage);
        }
        if (lastBotMessage.dataset.rawMarkdown === undefined) {
            lastBotMessage.dataset.rawMarkdown = '';
        }
        const chunkContent = data.message || '';
        lastBotMessage.dataset.rawMarkdown += chunkContent;
        if (typeof marked !== 'undefined') {
            lastBotMessage.innerHTML = marked.parse(lastBotMessage.dataset.rawMarkdown, { sanitize: true, gfm: true, breaks: true });
        } else {
            console.warn('marked.js not found. Displaying raw text.');
            lastBotMessage.textContent = lastBotMessage.dataset.rawMarkdown;
        }
        chatMessages.scrollTop = chatMessages.scrollHeight;
    } else if (data.type === 'chat' && data.sender === 'ai') {
        const botDiv = document.createElement('div');
        botDiv.classList.add('chat-message', 'bot-message');
        if (typeof marked !== 'undefined') {
            botDiv.innerHTML = marked.parse(data.message || '', { sanitize: true, gfm: true, breaks: true });
        } else {
            console.warn('marked.js not found. Displaying raw text.');
            botDiv.textContent = data.message || '';
        }
        chatMessages.appendChild(botDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    } else if (data.type === 'status') {
        const existingStatus = chatMessages.querySelector('.chat-message.status');
        if (existingStatus) existingStatus.remove();
        const statusDiv = document.createElement('div');
        statusDiv.classList.add('chat-message', 'status');
        statusDiv.textContent = data.message || '...';
        chatMessages.appendChild(statusDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    } else if (data.type === 'imageResult') {
        const imageDiv = document.createElement('div');
        imageDiv.classList.add('chat-message', 'bot-message', 'image-message');
        imageDiv.innerHTML = `
            <p>Here is the image you requested:</p>
            <img src="${data.imageUrl}" 
                 class="generated-image" 
                 alt="Generated Image" 
                 style="max-width: 100%; height: auto; border-radius: 8px; margin-top: 8px;" 
                 ${data.contentId ? `data-content-id="${data.contentId}"` : ''}>
        `;
        chatMessages.appendChild(imageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    } else if (data.type === 'chatEnd' && data.image) {
        const loadingDiv = chatMessages.querySelector('.image-loading');
        if (loadingDiv) loadingDiv.remove();
        const imageDiv = document.createElement('div');
        imageDiv.classList.add('chat-message', 'bot-message');
        imageDiv.innerHTML = `Here is your image: <img src="${data.image}" class="thumbnail" alt="Generated Image">`;
        chatMessages.appendChild(imageDiv);
        chatMessages.scrollTop = chatMessages.scrollHeight;
    } else if (data.type === 'SetTitle') {
        document.title = `${data.newTitle} | Pixzor`;
    }
};

function showToast(message, type = 'info') {
    const toastContainer = document.getElementById('toast-container');
    const toast = document.createElement('div');
    toast.className = `toast-${type} p-4 mb-4 rounded-lg shadow-lg text-white flex items-center justify-between max-w-sm`;
    toast.innerHTML = `
        <span>${message}</span>
        <button class="ml-4 text-white hover:text-gray-200" onclick="this.parentElement.remove()">✕</button>
    `;
    toastContainer.appendChild(toast);
    setTimeout(() => toast.remove(), 5000);
}

// User Authentication (unchanged)
window.isLoggedIn = false;

fetch('/api/user-info')
    .then(response => {
        if (response.ok) {
            window.isLoggedIn = true;
            return response.json();
        } else {
            window.isLoggedIn = false;
            return null;
        }
    })
    .then(data => {
        const tokenCount = document.getElementById('token-count');
        const authButton = document.getElementById('google-auth-button');
        const authText = document.getElementById('auth-text');
        if (window.isLoggedIn) {
            const credits = parseFloat(data.credits) || 0;
            tokenCount.textContent = `$${credits.toFixed(2)} Credits`;
            authText.textContent = 'Logout';
            authButton.onclick = () => window.location.href = '/logout';
        } else {
            tokenCount.textContent = '- Credits';
            authText.textContent = 'Login';
            authButton.onclick = () => window.location.href = '/auth/google';
        }
    })
    .catch(error => {
        console.error('Error fetching user data:', error);
        document.getElementById('token-count').textContent = '0 Credits';
        window.isLoggedIn = false;
    });

// Sidebar Logic (MODIFIED)
const sidebarItems = document.querySelectorAll('.sidebar-item');
const contentArea = document.getElementById('content-area') || document.getElementById('chat-messages');

if (!contentArea) {
    console.error('[Sidebar] Content area not found');
}

sidebarItems.forEach(item => {
    item.addEventListener('click', (event) => {
        event.preventDefault();
        const section = item.dataset.section;
        console.log(`[Sidebar] Clicked on section: ${section}`);
        console.log(`[Sidebar Click] Detected section: '${section}'`);

        // Remove active class from all items and add to the clicked one
        sidebarItems.forEach(i => i.classList.remove('active'));
        item.classList.add('active');

        // Update history and title (MODIFIED)
        if (section === 'files') {
            history.pushState({ section }, '', '/files');
            document.title = 'Files | Pixzor';
        } else {
            history.replaceState({ section }, '', window.location.pathname);
            document.title = `${section.charAt(0).toUpperCase() + section.slice(1)} | Pixzor`;
        }

        if (!contentArea) {
            console.error('[Sidebar Click] Content area not found');
            return;
        }

        // Reset chat area flag
        window.isChatAreaClearedForSession = false;

        // Load section content (unchanged)
        if (section === 'home') {
            window.location.href = '/';
            return;
        } else if (section === 'files') {
            contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Loading files...</p>';

            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
            console.log(`[Files Load] CSRF Token: ${csrfToken}, isLoggedIn: ${window.isLoggedIn}`);

            fetch('/api/files', {
                method: 'GET',
                headers: {
                    'X-CSRF-Token': csrfToken,
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => {
                    console.log(`[Files Load] Response status: ${response.status}`);
                    if (!response.ok) {
                        console.log(`[Files Load] Response headers:`, response.headers);
                        if (response.status === 401) {
                            console.log('[Files Load] Detected 401 Unauthorized');
                            return Promise.reject({ isAuthError: true, status: response.status });
                        }
                        return response.json().then(err => {
                            console.error('[Files Load] Server error data:', err);
                            throw new Error(err.message || `HTTP error! status: ${response.status}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('[Files Load] Data received:', data);
                    let html;
                    if (data.items && data.items.length > 0) {
                        const gridItems = data.items.map(item => `
                            <div class="file-card relative group cursor-pointer aspect-square" data-id="${item.id}">
                                <img src="${item.image}" 
                                     alt="File thumbnail" 
                                     class="w-full h-full object-cover rounded-lg transition-transform duration-200 ease-in-out group-hover:scale-105"
                                     loading="lazy">
                                <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-opacity duration-200 ease-in-out rounded-lg"></div>
                                ${window.isLoggedIn && item.isOwner ? `
                                    <button class="toggle-public-btn absolute top-2 left-2 bg-gray-800 text-white p-2 rounded-full hover:bg-gray-700"
                                            data-id="${item.id}" data-public="${item.isPublic ? '1' : '0'}"
                                            title="${item.isPublic ? 'Make Private' : 'Make Public'}">
                                        <i class="fas ${item.isPublic ? 'fa-lock' : 'fa-globe'}"></i>
                                    </button>
                                ` : ''}
                            </div>
                        `).join('');
                        // Add grid-sizer for Masonry
                        html = `<div id="file-list" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 p-4">
                                  <div class="grid-sizer"></div>
                                  ${gridItems}
                                </div>`;
                    } else {
                         // If no items, still provide the file-list container for consistency
                        html = `<div id="file-list" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 p-4">
                                  <div class="grid-sizer"></div>
                                  <p class="text-center text-gray-400 p-4 col-span-full">${data.message || 'No files yet.'}</p>
                                </div>`;
                    }
                    contentArea.innerHTML = html;

                    // Initialize Like Buttons for the newly added file cards
                    if (typeof initializeLikeButtons === 'function') {
                        console.log('[core.js Files Load] Calling initializeLikeButtons for #file-list content.');
                        initializeLikeButtons();
                    } else {
                        console.warn('[core.js Files Load] initializeLikeButtons function not found. Make sure gallery.js is loaded and initializeLikeButtons is global.');
                    }

                    // Initialize Masonry for the #file-list if items exist
                    const fileListElement = document.getElementById('file-list');
                    if (typeof Masonry !== 'undefined' && fileListElement && data.items && data.items.length > 0) {
                        try {
                            const msnry = new Masonry(fileListElement, {
                                itemSelector: '.file-card', // Correct selector for items in #file-list
                                columnWidth: '.grid-sizer',
                                gutter: 12,
                                percentPosition: true
                            });
                            window.masonryInstance = msnry; // Assign to global scope
                            console.log('[core.js Files Load] Masonry instance CREATED and assigned for #file-list:', window.masonryInstance);
                            
                            imagesLoaded(fileListElement).on('always', function() {
                                console.log('[core.js Files Load] imagesLoaded complete for #file-list, layout Masonry.');
                                if (window.masonryInstance) {
                                    window.masonryInstance.layout();
                                }
                            });
                        } catch (e) {
                            console.error('[core.js Files Load] Error initializing Masonry for #file-list:', e);
                            window.masonryInstance = null;
                        }
                    } else {
                        console.log('[core.js Files Load] Masonry NOT initialized for #file-list. Conditions: Masonry lib?', !!(typeof Masonry !== 'undefined'), 'fileListElement?', !!fileListElement, 'Has items?', !!(data.items && data.items.length > 0));
                        window.masonryInstance = null; // Ensure it's null if not initialized
                    }

                    contentArea.addEventListener('click', (event) => {
                        const fileCard = event.target.closest('.file-card');
                        const toggleBtn = event.target.closest('.toggle-public-btn');

                        if (toggleBtn) {
                            const contentId = toggleBtn.dataset.id;
                            const isPublic = toggleBtn.dataset.public === '1';
                            console.log(`[Files Click] Toggling public status for ID: ${contentId}, Current isPublic: ${isPublic}`);

                            fetch(`/api/content/${contentId}`, {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json',
                                    'X-CSRF-Token': csrfToken
                                },
                                credentials: 'include',
                                body: JSON.stringify({ isPublic: !isPublic })
                            })
                                .then(response => response.json())
                                .then(result => {
                                    if (result.success) {
                                        toggleBtn.dataset.public = isPublic ? '0' : '1';
                                        toggleBtn.title = isPublic ? 'Make Public' : 'Make Private';
                                        toggleBtn.querySelector('i').className = `fas ${isPublic ? 'fa-globe' : 'fa-lock'}`;
                                        showToast(`Image is now ${isPublic ? 'private' : 'public'}.`, 'success');
                                    } else {
                                        throw new Error(result.error || 'Failed to update visibility');
                                    }
                                })
                                .catch(error => {
                                    console.error('[Files Toggle] Error:', error);
                                    showToast(`Failed to update visibility: ${error.message}`, 'error');
                                });
                            return;
                        }

                        if (fileCard) {
                            const contentId = fileCard.dataset.id;
                            const imgElement = fileCard.querySelector('img');
                            const imageUrl = imgElement?.src;
                            console.log(`[Files Click] Clicked file card. ID: ${contentId}, URL: ${imageUrl}`);

                            if (window.openCommentsModal) {
                                openCommentsModal(contentId, imageUrl);
                                history.pushState({ contentId, section: 'files', modal: true }, '', `/image/${contentId}`);
                                document.title = data.items.find(item => item.id == contentId)?.prompt?.substring(0, 50) + '... | Pixzor' || 'Image Details | Pixzor';
                            } else {
                                console.error('[Files Click] openCommentsModal not available.');
                                showToast('Could not open image details.', 'error');
                            }
                        }
                    });
                })
                .catch(error => {
                    console.error('[Files Load] Error:', error);
                    contentArea.classList.remove('loading');
                    if (error && error.isAuthError) {
                        contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Please log in to access your files.</p>';
                    } else {
                        contentArea.innerHTML = `<p class="text-center text-red-500 p-4">Error loading files: ${error.message || 'An unknown error occurred'}</p>`;
                    }
                });
        } else if (section === 'chat-history') {
            contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Loading chat history...</p>';

            const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
            console.log(`[Chat History Load] CSRF Token: ${csrfToken}, isLoggedIn: ${window.isLoggedIn}`);

            fetch('/api/library/chats', {
                method: 'GET',
                headers: {
                    'X-CSRF-Token': csrfToken,
                    'Accept': 'application/json'
                },
                credentials: 'include'
            })
                .then(response => {
                    console.log(`[Chat History Load] Response status: ${response.status}`);
                    if (!response.ok) {
                        if (response.status === 401) {
                            console.log('[Chat History Load] Detected 401 Unauthorized');
                            return Promise.reject({ isAuthError: true, status: response.status });
                        }
                        return response.text().then(text => {
                            console.error('[Chat History Load] Response text:', text.slice(0, 100));
                            throw new Error(`HTTP error! status: ${response.status}`);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('[Chat History Load] Data received:', data);
                    const html = data.items?.map(item => `
                        <div class="content-item chat-message flex justify-between items-center p-3 rounded hover:bg-gray-700 cursor-pointer border-b border-gray-600" data-chat-id="${item.id}">
                            <div class="flex-grow mr-2 overflow-hidden" data-action="view-chat">
                                <p class="font-semibold text-white truncate">${item.title || 'Chat Session'}</p>
                                <p class="text-gray-400 text-sm">${new Date(item.timestamp).toLocaleString()}</p>
                            </div>
                            <button class="delete-chat-btn flex-shrink-0 p-1 text-gray-400 hover:text-red-500 rounded" data-chat-id="${item.id}" title="Delete Chat">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                                </svg>
                            </button>
                        </div>
                    `).join('') || `<p class="text-center text-gray-400">${data.message || 'No chat history yet.'}</p>`;
                    contentArea.innerHTML = `
                        <h2 class="text-xl font-semibold text-white mb-4 p-2 border-b border-gray-600">Chat History</h2>
                        <div class="space-y-1">${html}</div>
                    `;

                    function renderChatMessageContent(content) {
                        if (!window.marked) {
                            console.warn('[Chat History] Marked library not found, rendering plain text');
                            return content || '';
                        }
                        let htmlContent = marked.parse(content || '', { sanitize: true, gfm: true, breaks: true });
                        const imageUrlRegex = /(\/images\/generated\/[^\s]+\.(?:jpg|jpeg|png|gif))\b/gi;
                        htmlContent = htmlContent.replace(imageUrlRegex, (match) => {
                            return `<br><img src="${match}" alt="Chat Image" class="inline-block max-w-xs max-h-40 my-2 rounded shadow border border-gray-600">`;
                        });
                        return htmlContent;
                    }

                    document.querySelectorAll('.content-item.chat-message[data-chat-id]').forEach(chat => {
                        chat.addEventListener('click', (event) => {
                            if (event.target.closest('.delete-chat-btn')) return;
                            const chatId = chat.dataset.chatId;
                            console.log(`[Chat History] Clicked on chat ID: ${chatId}`);
                            contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Loading chat...</p>';

                            fetch(`/api/library/chats/${chatId}`, {
                                method: 'GET',
                                headers: {
                                    'X-CSRF-Token': csrfToken,
                                    'Accept': 'application/json'
                                },
                                credentials: 'include'
                            })
                                .then(response => {
                                    console.log(`[Chat History] Fetch chat ID ${chatId} status: ${response.status}`);
                                    if (!response.ok) {
                                        return response.json().then(err => {
                                            throw new Error(err.message || `HTTP error! status: ${response.status}`);
                                        });
                                    }
                                    return response.json();
                                })
                                .then(chatData => {
                                    console.log('[Chat History] Received chat data:', chatData);
                                    const messagesHtml = chatData.messages?.map(msg => `
                                        <div class="chat-message p-3 rounded mb-2 ${msg.role === 'user' ? 'bg-gray-800 text-right' : 'bg-gray-700 text-left'}">
                                            <strong class="font-semibold">${msg.role === 'user' ? 'You' : 'Bot'}:</strong>
                                            <div class="message-content mt-1">${renderChatMessageContent(msg.content)}</div>
                                        </div>
                                    `).join('') || `<p class="text-center text-gray-400">${chatData.message || 'No messages in this chat.'}</p>`;
                                    contentArea.innerHTML = `
                                        <button id="back-to-history" class="mb-4 px-3 py-1 bg-gray-600 hover:bg-gray-500 text-white rounded text-sm">← Back to History</button>
                                        <h3 class="text-lg font-semibold text-white mb-3 border-b border-gray-600 pb-2">${chatData.title || 'Chat Details'}</h3>
                                        <div class="space-y-2">${messagesHtml}</div>
                                    `;
                                    document.getElementById('back-to-history')?.addEventListener('click', () => {
                                        const historyItem = document.querySelector('.sidebar-item[data-section="chat-history"]');
                                        if (historyItem) historyItem.click();
                                    });
                                })
                                .catch(error => {
                                    console.error('[Chat History] Error loading chat:', error);
                                    contentArea.innerHTML = `<p class="text-center text-red-500 p-4">Error loading chat: ${error.message}</p>`;
                                });
                        });
                    });

                    document.querySelectorAll('.delete-chat-btn').forEach(button => {
                        button.addEventListener('click', (event) => {
                            event.stopPropagation();
                            const chatId = button.dataset.chatId;
                            const chatItemElement = button.closest('.content-item.chat-message');
                            const chatTitle = chatItemElement?.querySelector('p.font-semibold')?.textContent || 'this chat';

                            if (window.confirm(`Are you sure you want to delete "${chatTitle}"? This cannot be undone.`)) {
                                console.log(`[Chat History] Attempting to delete chat ID: ${chatId}`);
                                fetch(`/api/library/chats/${chatId}`, {
                                    method: 'DELETE',
                                    headers: {
                                        'Content-Type': 'application/json',
                                        'X-CSRF-Token': csrfToken
                                    },
                                    credentials: 'include'
                                })
                                    .then(response => {
                                        console.log(`[Chat History] Delete chat response status: ${response.status}`);
                                        if (!response.ok) {
                                            return response.json().then(err => {
                                                throw new Error(err.message || `HTTP error! status: ${response.status}`);
                                            });
                                        }
                                        return response.json();
                                    })
                                    .then(data => {
                                        console.log(`[Chat History] Successfully deleted chat ID: ${chatId}`, data);
                                        if (chatItemElement) {
                                            chatItemElement.remove();
                                            showToast(`Chat "${chatTitle}" deleted successfully.`, 'success');
                                            if (!contentArea.querySelector('.content-item.chat-message[data-chat-id]')) {
                                                contentArea.querySelector('div.space-y-1').innerHTML = '<p class="text-center text-gray-400">No chat history yet.</p>';
                                            }
                                        }
                                    })
                                    .catch(error => {
                                        console.error(`[Chat History] Error deleting chat ID ${chatId}:`, error);
                                        showToast(`Failed to delete chat: ${error.message}`, 'error');
                                    });
                            }
                        });
                    });
                })
                .catch(error => {
                    console.error('[Chat History] Error loading chat history:', error);
                    contentArea.classList.remove('loading');
                    if (error && error.isAuthError) {
                        contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Please log in to access your chat history.</p>';
                    } else {
                        contentArea.innerHTML = `<p class="text-center text-red-500 p-4">Error loading chat history: ${error.message || 'An unknown error occurred'}</p>`;
                    }
                });
        } else if (section === 'chat') {
            fetch('/partials/chat-tab')
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    return response.text();
                })
                .then(html => {
                    contentArea.innerHTML = html;
                    console.log("[Chat Tab] Partial HTML injected.");
                    if (typeof setupChat === 'function') {
                        console.log("[Chat Tab] Calling setupChat().");
                        setupChat();
                    } else {
                        console.error("[Chat Tab] setupChat function not found.");
                    }
                    if (typeof updateButtonState === 'function') {
                        updateButtonState('chat');
                    }
                })
                .catch(error => {
                    console.error("Error loading chat tab partial:", error);
                    contentArea.innerHTML = `<p>Error loading chat UI: ${error.message}</p>`;
                });
        } else if (section === 'gallery') {
            console.log('[core.js] Fetching gallery partial.');
            contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Loading gallery...</p>';
            fetch('/partials/gallery')
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    return response.text();
                })
                .then(html => {
                    contentArea.innerHTML = html;
                    console.log('[core.js] Gallery partial HTML injected.');
                    if (typeof initializeGallery === 'function') {
                        console.log('[core.js] Calling initializeGallery().');
                        initializeGallery();
                    } else {
                        console.error('[core.js] initializeGallery function not found after loading partial.');
                        contentArea.innerHTML = '<p class="text-center text-red-500 p-4">Error loading gallery: Gallery script not found.</p>';
                    }
                })
                .catch(error => {
                    console.error('[core.js] Error loading gallery partial:', error);
                    contentArea.innerHTML = `<p class="text-center text-red-500 p-4">Error loading gallery: ${error.message}</p>`;
                });
        } else if (section === 'create-image') {
            fetch('/partials/create-images')
                .then(response => {
                    if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                    return response.text();
                })
                .then(html => {
                    contentArea.innerHTML = html;
                    console.log("[Create Image] Partial HTML injected.");
                    const generateButton = document.getElementById('image-submit');
                    const promptInput = document.getElementById('image-input');
                    const resultsArea = document.getElementById('image-results-area');
                    console.log("[Create Image] Found elements:", { generateButton, promptInput, resultsArea });
                    if (!generateButton || !promptInput || !resultsArea) {
                        console.error("[Create Image] Could not find necessary elements in create-images partial.");
                        return;
                    }
                    console.log("[Create Image] Adding click listener to button:", generateButton);
                    generateButton.addEventListener('click', async () => {
                        console.log("[Create Image] Generate button clicked!");
                        const prompt = promptInput.value.trim();
                        if (!prompt) {
                            showToast('Please enter a prompt.', 'error');
                            return;
                        }
                        if (!window.isLoggedIn) {
                            showToast('Please log in to create images.', 'error');
                            return;
                        }
                        const originalButtonText = generateButton.textContent;
                        generateButton.disabled = true;
                        generateButton.textContent = 'Generating...';
                        try {
                            showToast('Image generation endpoint not yet implemented.', 'info');
                        } catch (error) {
                            console.error("Image generation error:", error);
                            showToast(`Error generating image: ${error.message}`, 'error');
                        } finally {
                            generateButton.disabled = false;
                            generateButton.textContent = originalButtonText;
                        }
                    });
                })
                .catch(error => {
                    console.error("Error loading create-images partial:", error);
                    contentArea.innerHTML = `<p>Error loading image creation UI: ${error.message}</p>`;
                });
        } else {
            contentArea.innerHTML = `<p class="text-center text-gray-400 p-4">Section ${section} not implemented.</p>`;
        }
    });
});

document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM fully loaded and parsed.');
    fetch('/partials/modals')
        .then(response => response.text())
        .then(html => {
            document.getElementById('modals-container').innerHTML = html;
            window.showModal = function(id) {
                const modal = document.getElementById(id);
                if (modal) {
                    modal.classList.remove('hidden');
                    console.log(`Modal ${id} shown`);
                } else {
                    console.error(`Modal with ID ${id} not found`);
                }
            };
            window.hideModal = function(id) {
                const modal = document.getElementById(id);
                if (modal) {
                    modal.classList.add('hidden');
                    console.log(`Modal ${id} hidden`);
                } else {
                    console.error(`Modal with ID ${id} not found`);
                }
            };
            document.getElementById('tokens-button')?.addEventListener('click', () => {
                if (!window.isLoggedIn) {
                    showToast('Please log in to buy credits.', 'error');
                    window.location.href = '/auth/google';
                    return;
                }
                window.showModal('buy-tokens-modal');
            });
            document.addEventListener('DOMContentLoaded', () => {
                console.log('Checking for modal elements on page load');
                const buyTokensModal = document.getElementById('buy-tokens-modal');
                const welcomeModal = document.getElementById('welcome-modal');
                console.log('Buy Tokens Modal exists:', !!buyTokensModal);
                console.log('Welcome Modal exists:', !!welcomeModal);
            });
            document.getElementById('close-buy-tokens-modal')?.addEventListener('click', () => window.hideModal('buy-tokens-modal'));
            const stripePublishableKey = 'pk_test_51QNNomGgZQx5JKvI2PAzM2GO5f0ukOcam2RUMj0ceduOPIuoRmWgqt7nqs46lRF7eyKd46Q8MRs1OYX76xi7fxHQ00LwfUHss5';
            let stripe = null;
            if (typeof Stripe === 'function') {
                stripe = Stripe(stripePublishableKey);
            } else {
                console.error("Stripe.js not loaded. Make sure it's included in your HTML.");
                showToast('Payment system error. Please contact support.', 'error');
            }
            const buyTokensForm = document.getElementById('buy-tokens-form');
            if (buyTokensForm && stripe) {
                buyTokensForm.addEventListener('submit', async (e) => {
                    e.preventDefault();
                    const bundleSelect = document.getElementById('token-bundle');
                    const tokens = bundleSelect.value;
                    const selectedOption = bundleSelect.options[bundleSelect.selectedIndex];
                    const price = selectedOption.getAttribute('data-price');
                    if (!price) {
                        console.error('Missing data-price attribute on selected token bundle option.');
                        showToast('Configuration error. Please select a valid bundle.', 'error');
                        return;
                    }
                    console.log(`Attempting to buy ${tokens} tokens for price: £${price}`);
                    try {
                        const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                        const response = await fetch('/payment/create-checkout-session', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-CSRF-Token': csrfToken
                            },
                            body: JSON.stringify({ tokens: tokens, price: price })
                        });
                        console.log('Backend response status:', response.status);
                        if (!response.ok) {
                            const errorData = await response.json();
                            console.error('Backend error:', errorData);
                            throw new Error(errorData.error || `Server error: ${response.status}`);
                        }
                        const { sessionId } = await response.json();
                        const { error } = await stripe.redirectToCheckout({ sessionId });
                        if (error) {
                            console.error('Stripe redirect error:', error);
                            throw new Error(error.message || 'Failed to redirect to payment.');
                        }
                    } catch (error) {
                        console.error('Error during token purchase:', error);
                        showToast(`Payment failed: ${error.message}. Please try again.`, 'error');
                    }
                });
            } else if (!buyTokensForm) {
                console.warn('#buy-tokens-form not found.');
            } else if (!stripe) {
                console.warn('Stripe object not initialized, cannot setup buy tokens form.');
            }
            if (!localStorage.getItem('welcomeShown')) {
                window.showModal('welcome-modal');
                localStorage.setItem('welcomeShown', 'true');
            }
            document.getElementById('close-welcome-modal')?.addEventListener('click', () => window.hideModal('welcome-modal'));
            document.getElementById('close-welcome-modal-btn')?.addEventListener('click', () => window.hideModal('welcome-modal'));
            document.getElementById('register-with-google')?.addEventListener('click', () => {
                window.location.href = '/auth/google';
                window.hideModal('welcome-modal');
            });
            document.getElementById('close-about-popup')?.addEventListener('click', () => window.hideModal('about-popup'));
            document.getElementById('close-about-popup-btn')?.addEventListener('click', () => window.hideModal('about-popup'));
            document.getElementById('content-area')?.addEventListener('click', (e) => {
                if (e.target.id === 'about-link') {
                    e.preventDefault();
                    window.showModal('about-popup');
                }
            });
        })
        .catch(error => {
            console.error("Error fetching or setting up modals:", error);
        });
});

===== public\js\create-tab.js =====
console.log('create-tab.js script tag executed');

// --- Global State Variables ---
let uploadedFileObject = null; // Stores the actual File object globally

// --- DOM Element Variables (initialized globally) ---
let imageUploadInput = document.getElementById('image-upload-input');
let thumbnail = document.getElementById('image-thumbnail-preview'); // Renamed from imagePreview for clarity
let placeholderIcon = document.getElementById('thumbnail-placeholder-icon'); // CORRECT ID
let clearButton = document.getElementById('clear-image-upload');
let strengthControl = document.getElementById('image-strength-control');
let imageStrengthSlider = document.getElementById('image-strength-slider'); // Renamed variable
let imageStrengthValueDisplay = document.getElementById('image-strength-value-display'); // CORRECT ID
let aspectRatioButton = document.getElementById('aspect-ratio-dropdown');
let modelSelect = document.getElementById('image-model-select'); // CORRECT ID
let thumbnailContainer = document.getElementById('thumbnail-container'); // Added global declaration
let styleSelectElement = document.getElementById('style-select'); // Added
let styleSelectContainer = document.getElementById('style-select-container'); // Added
let imagePrompt = document.getElementById('image-prompt-input');
let imageSubmit = document.getElementById('image-generate-button'); 
const imageCostDisplay = document.getElementById('image-token-cost-display'); // Corrected ID to match HTML in chat-tab.ejs

// --- Log values immediately after assignment ---
console.log('[Create Tab - Global Scope] Values after immediate assignment:');
console.log('  modelSelect:', modelSelect);
console.log('  styleSelectElement:', styleSelectElement);
console.log('  imageUploadInput:', imageUploadInput);
console.log('  imageSubmit:', imageSubmit);
console.log('  styleSelectContainer:', styleSelectContainer);

// --- Utility Function: Create Loading Indicator --- 
function createLoadingIndicator(id = 'loading-indicator') {
    const indicator = document.createElement('div');
    indicator.id = id;
    indicator.classList.add('flex', 'items-center', 'justify-center', 'p-4', 'text-gray-500');
    indicator.innerHTML = `
        <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
            <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
            <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
        <span>Generating...</span>
    `;
    return indicator;
}

// --- Model Style Definitions --- 
const modelStyles = {
    // Model ID from Pixzor's dropdown : Array of styles from demo
    'runware:100@1': [ // Flux Schnell
      { value: '', label: 'None' } 
    ],
    'runware:101@1': [ // Flux Dev
      { value: '', label: 'None' },
      { value: 'civitai:180891@838667', label: 'Anime' },
      { value: 'civitai:128568@747534', label: 'Cyberpunk Anime Style', negativePrompt: 'deformed, blurry' },
      { value: 'civitai:748468@837016', label: 'Retro Collage Art' },
      { value: 'civitai:788990@882302', label: 'Creepycute' },
      { value: 'civitai:720587@805786', label: 'DecoPulse FLUX' },
      { value: 'civitai:15452@935477', label: 'Deep Sea Particle Enhancer' },
      { value: 'khialmaster:643886@720252', label: 'Faetastic Details' },
      { value: 'civitai:269592@806653', label: 'Fractal Geometry' },
      { value: 'civitai:747833@843992', label: 'Galactixy Illustrations Style' },
      { value: 'civitai:103528@743778', label: 'Geometric Woman' },
      { value: 'civitai:170039@813900', label: 'Graphic Portrait' },
      { value: 'civitai:894974@1001494', label: 'Mat Miller Art' },
      { value: 'civitai:682651@764057', label: 'Moebius Style' },
      { value: 'civitai:555323@832559', label: 'OB3D Isometric 3D Room' },
      { value: 'civitai:860403@1138383', label: 'Paper Quilling and Layering Style' },
      { value: 'civitai:1000081@1147021', label: 'Classic Oil Painting', negativePrompt: 'deformed, blurry, bad anatomy, worst quality, low quality' }, // Updated based on successful test
      { value: 'civitai:44638@755521', label: 'Disney' }, 
      { value: 'civitai:310964@778472', label: 'Furry Enhancer' }, 
      { value: 'civitai:650743@728041', label: 'MidJourney-style' }, 
      { value: 'civitai:970862@1434002', label: 'Hyper Realism' }, 
      { value: 'civitai:970862@1434002', label: 'Amateur Snapshot' }, 
      { value: 'civitai:784568@974292', label: 'Amazing scenery' } 
    ],
    'rundiffusion:130@100': [ // Juggernaut Pro Flux
      { value: '', label: 'None' } 
    ],
    'civitai:133005@782002': [ // PhotoMaker (Face / Character)
      { value: '', label: 'None' },
      { value: 'cinematic', label: 'Cinematic' },        
      { value: 'disney_character', label: 'Disney Character' },
      { value: 'Digital Art', label: 'Digital Art' },
      { value: 'Fantasy art', label: 'Fantasy Art' },        
      { value: 'photographic', label: 'Photographic' },
      { value: 'neonpunk', label: 'Neonpunk' },
      { value: 'enhance', label: 'Enhance' },
      { value: 'Comic Book', label: 'Comic Book' },
      { value: 'lowpoly', label: 'Lowpoly' },
      { value: 'line-art', label: 'Line Art' }
    ]
};

// --- Auto-resize textarea logic --- 
function autoResizeTextarea(textarea) {
    // Attempt to get root font size for rem to px conversion, fallback to 16px
    const rootFontSize = parseFloat(getComputedStyle(document.documentElement).fontSize) || 16;
    
    // These should match the inline style values in chat-tab.ejs
    const minHeightRem = 3.5;
    const maxHeightRem = 13.5;

    const minHeightPx = minHeightRem * rootFontSize;
    const maxHeightPx = maxHeightRem * rootFontSize;

    textarea.style.height = 'auto'; // Reset height to correctly calculate scrollHeight
    let newHeight = textarea.scrollHeight;

    // Ensure the new height is at least our desired minimum
    if (newHeight < minHeightPx) {
        newHeight = minHeightPx;
    }

    // Ensure the new height does not exceed our desired maximum
    if (newHeight > maxHeightPx) {
        newHeight = maxHeightPx;
        textarea.style.overflowY = 'auto'; // Show scrollbar if content exceeds max height
    } else {
        textarea.style.overflowY = 'hidden'; // Hide scrollbar if content is within max height
    }
    
    textarea.style.height = newHeight + 'px';
}

// --- NEW: Function to restore content area ---
function restoreContentArea() {
    const contentArea = document.querySelector('#chat-messages');
    if (contentArea) {
        contentArea.innerHTML = originalContent; // Restore the content
    } else {
        console.error(`[Create Tab] CRITICAL: Content area '#chat-messages' not found during restoration!`);
    }
}

// --- Function to Update Cost Display --- (Define outside DOMContentLoaded if needed elsewhere, or inside if only used there)
function updateCostDisplay() {
    console.log('[Create Tab] updateCostDisplay called');
    if (!modelSelect || !imageCostDisplay) {
        console.warn('[Create Tab] updateCostDisplay: modelSelect or imageCostDisplay not ready. Cannot update cost display.');
        return;
    }

    const modelId = modelSelect.value;
    console.log('[Cost Update] Selected Model ID:', modelId);
    const models = window.RUNWARE_MODELS || {};
    console.log('[Cost Update] RUNWARE_MODELS:', models);
    const modelConfig = models[modelId];
    console.log('[Cost Update] Selected Model Config:', modelConfig);

    let cost = 0;
    const hasUploadedImage = uploadedFileObject !== null;
    console.log('[Cost Update] Has Uploaded Image:', hasUploadedImage);

    if (modelConfig) {
        if (hasUploadedImage && modelConfig.userPriceI2I) {
            cost = modelConfig.userPriceI2I;
            console.log('[Cost Update] Using userPriceI2I:', cost);
        } else if (!hasUploadedImage && modelConfig.userPriceT2I) {
            cost = modelConfig.userPriceT2I;
            console.log('[Cost Update] Using userPriceT2I:', cost);
        } else if (modelConfig.userPrice) {
            cost = modelConfig.userPrice;
            console.log('[Cost Update] Using general userPrice:', cost);
        } else {
            console.warn('[Cost Update] No userPrice defined for this mode. Defaulting to 0.');
        }
    } else {
        console.warn('[Cost Update] Model config not found for ID:', modelId);
        // Fallback to data-cost attribute if available
        const selectedOption = modelSelect.options[modelSelect.selectedIndex];
        if (selectedOption && selectedOption.dataset.cost) {
            cost = parseFloat(selectedOption.dataset.cost) || 0;
            console.log('[Cost Update] Fallback to data-cost attribute:', cost);
        }
    }

    // Display exact cost without rounding
    console.log('[Cost Update] Final exact cost:', cost);
    imageCostDisplay.textContent = `($${cost.toFixed(4)})`;
}

// --- DOMContentLoaded Listener --- 
document.addEventListener('DOMContentLoaded', () => {
    console.log('[DOMContentLoaded] Event Fired. Accessing pre-assigned elements...');
    console.log('create-tab.js: DOMContentLoaded - Initializing elements and controls');

    // --- Log values again inside DOMContentLoaded ---
    console.log('[Create Tab - DOMContentLoaded] Values just before check:');
    console.log('  modelSelect:', modelSelect);
    console.log('  styleSelectElement:', styleSelectElement);
    console.log('  imageUploadInput:', imageUploadInput);
    console.log('  imageSubmit:', imageSubmit);
    console.log('  styleSelectContainer:', styleSelectContainer);

    // --- Check for essential elements right before attaching listeners --- 
    if (!modelSelect || !styleSelectElement || !imageUploadInput || !imageSubmit) {
        console.error('[Create Tab] CRITICAL: Could not find essential elements right before setting listeners. Aborting setup.');
        // Log exactly which one is null
        if (!modelSelect) console.error('modelSelect is null');
        if (!styleSelectElement) console.error('styleSelectElement is null');
        if (!imageUploadInput) console.error('imageUploadInput is null');
        if (!imageSubmit) console.error('imageSubmit is null');
        return; // Stop execution
    }

    // --- Update Controls Based On State (Define early to avoid ReferenceError) ---
    function updateControlsBasedOnState() {
        console.log('[Create Tab] updateControlsBasedOnState called');
        // Ensure elements are checked *within* this function if potentially null
        if (!modelSelect || !imagePrompt || !strengthControl || !imageSubmit || typeof uploadedFileObject === 'undefined' /* Check type, not value */ || !aspectRatioButton) { 
            console.warn('[Create Tab] updateControlsBasedOnState: One or more essential elements/variables not ready. Cannot update controls.');
            if (imageSubmit) imageSubmit.disabled = true; // Default to disabled if elements missing
            return;
        }
    
        const modelValue = modelSelect.value;
        // Access global RUNWARE_MODELS via window object, check for existence
        const models = window.RUNWARE_MODELS || {}; // Default to empty OBJECT if undefined
        const selectedModelConfig = models[modelValue] || null; // Access by key
        // Determine img2img capability based on type (assume non-text-to-image can handle images)
        const isImg2ImgCapable = selectedModelConfig ? selectedModelConfig.type !== 'text-to-image' : false;
        const hasUploadedImage = uploadedFileObject !== null; // Check if the file object exists
        const hasPromptValue = imagePrompt.value.trim().length > 0;
    
        // Show strength slider only if an image is uploaded AND model supports img2img
        strengthControl.classList.toggle('hidden', !(hasUploadedImage && isImg2ImgCapable));
    
        // Generate button disabled logic:
        let disableGenerate = false;
        if (!isImg2ImgCapable) {
            // For text-to-image models: Disable if no prompt
            disableGenerate = !hasPromptValue;
        } else {
            // For image-to-image models: Disable if no prompt OR no image
            disableGenerate = !hasPromptValue || !hasUploadedImage;
        }
        imageSubmit.disabled = disableGenerate;
        console.log(`[UpdateControls] Model: ${modelValue}, Img2ImgCapable: ${isImg2ImgCapable}, HasImage: ${hasUploadedImage}, HasPrompt: ${hasPromptValue}, Generate Disabled: ${imageSubmit.disabled}`);
    
        // Enable/Disable Aspect Ratio Dropdown
        const photoMakerModelId = 'civitai:133005@782002'; // Corrected ID for Face/Character model
        // Disable ONLY if image is uploaded AND the model is NOT PhotoMaker
        const disableAspectRatio = hasUploadedImage && modelValue !== photoMakerModelId;

        aspectRatioButton.disabled = disableAspectRatio;
        aspectRatioButton.classList.toggle('opacity-50', disableAspectRatio);
        aspectRatioButton.classList.toggle('cursor-not-allowed', disableAspectRatio);

        // Set appropriate title
        if (disableAspectRatio) {
            aspectRatioButton.title = "Aspect ratio is determined by the uploaded image for this model";
        } else if (hasUploadedImage && modelValue === photoMakerModelId) {
            aspectRatioButton.title = "Select Aspect Ratio (Note: May be overridden by Face model)";
        } else { // No image uploaded OR (image uploaded AND model is PhotoMaker)
            aspectRatioButton.title = "Select Aspect Ratio";
        }
    }

    console.log('[DOMContentLoaded] Performing initial control and style setup...');
    updateControlsBasedOnState();
    updateCostDisplay(); // Update cost for the default selected model
    if (modelSelect) {
        updateStyleDropdown(); // Populate styles for initially selected model
    } else {
        console.warn('[DOMContentLoaded] modelSelect not found, cannot set initial style options.');
    }

    console.log('create-tab.js: Setting up listeners...');

    // --- Update Style Dropdown & Hidden Inputs (Moved Inside) ---
    function updateStyleDropdown() {
        console.log('[Create Tab] updateStyleDropdown called');
        if (!styleSelectElement || !modelSelect) {
            console.warn('[Create Tab] updateStyleDropdown: styleSelectElement or modelSelect not ready.');
            return;
        }
        const modelId = modelSelect.value;
        styleSelectElement.innerHTML = ''; // Clear existing options
        
        // Check if the model uses prompt-based styling
        const modelConfig = window.RUNWARE_MODELS[modelId];
        if (modelConfig && modelConfig.usesPromptBasedStyling && window.PROMPT_BASED_STYLES && window.PROMPT_BASED_STYLES.length > 0) {
            console.log(`[Create Tab] Model ${modelId} uses prompt-based styling. Populating styles from PROMPT_BASED_STYLES.`);
            window.PROMPT_BASED_STYLES.forEach(style => {
                const option = document.createElement('option');
                option.value = style.value;
                option.textContent = style.name;
                styleSelectElement.appendChild(option);
            });
        } else if (modelStyles[modelId]) {
            console.log(`[Create Tab] Populating styles for modelId: ${modelId}`);
            modelStyles[modelId].forEach(style => {
                const option = document.createElement('option');
                option.value = style.value;
                option.textContent = style.label;
                styleSelectElement.appendChild(option);
            });
        } else {
            console.log(`[Create Tab] No styles found for modelId: ${modelId}`);
            const option = document.createElement('option');
            option.value = '';
            option.textContent = 'None';
            styleSelectElement.appendChild(option);
        }
    }

    // --- Update Hidden Style Inputs (Helper, Moved Inside) ---
    function updateHiddenStyleInputs() {
        if (!styleSelectElement) { 
            console.warn('[Style Update] Style select element not found for hidden inputs.');
            return; 
        }
        const selectedOption = styleSelectElement.options[styleSelectElement.selectedIndex];
        const label = selectedOption ? selectedOption.textContent : '';
        const negativePromptValue = selectedOption ? selectedOption.dataset.negativePrompt : '';
        // Set hidden inputs
        const labelInput = document.getElementById('style-label-input');
        const negPromptInput = document.getElementById('negative-prompt-input');
        if (labelInput) labelInput.value = label;
        if (negPromptInput) negPromptInput.value = negativePromptValue;
        console.log('[Style Update] Set hidden inputs -> Label:', label, '|| Negative Prompt:', negativePromptValue);
    }

    function toggleGenerateButtonState() {
        // This function now runs within the DOMContentLoaded scope
        // where imagePrompt and imageSubmit are guaranteed to be assigned (if found)
        if (imagePrompt && imageSubmit) {
           const promptIsEmpty = imagePrompt.value.trim() === '';
           imageSubmit.disabled = promptIsEmpty;
        } else {
           console.warn('[toggleGenerateButtonState] imagePrompt or imageSubmit not found/assigned.');
        }
    }

    function updateStrengthSlider() {
        // Moved inside DOMContentLoaded to access assigned elements
        if (imageStrengthSlider && imageStrengthValueDisplay) {
           imageStrengthValueDisplay.textContent = parseFloat(imageStrengthSlider.value).toFixed(2);
        } else {
           console.warn('[updateStrengthSlider] strengthSlider or strengthValueDisplay not found/assigned.');
           if (!imageStrengthSlider) console.warn('  Missing: imageStrengthSlider');
           if (!imageStrengthValueDisplay) console.warn('  Missing: imageStrengthValueDisplay');
        }
    }

    if (imagePrompt) {
        imagePrompt.addEventListener('input', () => {
            autoResizeTextarea(imagePrompt);
        });
        imagePrompt.addEventListener('input', toggleGenerateButtonState);
        toggleGenerateButtonState(); // Initial check
        autoResizeTextarea(imagePrompt);
    }
    updateStrengthSlider();

    // --- Event Listener for Image Upload Input (Moved Inside DOMContentLoaded) ---
    function handleImageUploadInput() {
        if (imageUploadInput && thumbnail && clearButton && placeholderIcon) {
            imageUploadInput.addEventListener('change', function(event) {
                const file = event.target.files[0];
                if (file) {
                    // Basic validation (optional, can be enhanced)
                    if (!file.type.startsWith('image/')) {
                        window.showToast('Please select an image file.', 'error');
                        return;
                    }
                    if (file.size > 5 * 1024 * 1024) { // Example: 5MB limit
                        window.showToast('File size exceeds 5MB limit.', 'error');
                        return;
                    }

                    // *** Assign the file to the global variable ***
                    uploadedFileObject = file; // Store the actual File object
                    console.log('[Handle Upload Input] Stored file object:', uploadedFileObject);

                    const reader = new FileReader();
                    reader.onload = function(e) {
                        thumbnail.src = e.target.result;
                        thumbnail.classList.remove('hidden');
                        placeholderIcon.classList.add('hidden');
                        clearButton.classList.remove('hidden');
                        updateControlsBasedOnState(); // Call update function (now in scope)
                        updateCostDisplay(); // Update cost for I2I mode
                    }
                    reader.readAsDataURL(file);
                } else {
                    clearUploadedImage(); // Clear if no file selected (now in scope)
                }
            });
        } else {
            console.error('[Handle Upload Input] One or more required elements not found.');
        }
    }

    handleImageUploadInput();

    // Flag to track if we should clear the content area for the first generation
    let isFirstGenerationInSession = true;

    if (imageSubmit && imagePrompt && modelSelect && aspectRatioButton && styleSelectElement) { 
        console.log('create-tab.js: Adding listener to Image submit button');
        console.log('[DEBUG] Attempting to add click listener to:', imageSubmit);
        imageSubmit.addEventListener('click', async (event) => {
            console.log('[Create Image Tab] Generate button clicked!'); 

            let placeholderId = null; // To store the unique ID for the placeholder
            let timerIntervalId = null; // To store the timer interval ID
            let secondsElapsed = 0;

            if (!window.isLoggedIn) {
                 console.log('[Create Image Tab] User not logged in. Showing toast.'); 
                 window.showToast('Please log in to create images.', 'error');
                 return;
            } else {
                console.log('[Create Image Tab] User is logged in.'); 
            }

            const selectedModelValue = modelSelect ? modelSelect.value : null;
            const isPhotoMakerSelected = selectedModelValue === 'civitai:133005@782002';

            if (isPhotoMakerSelected && !uploadedFileObject) {
                console.log('[Create Image Tab] PhotoMaker selected without an image.');
                window.showToast('Please upload a face image to use the Face / Character model.', 'error');
                // Re-enable button immediately as no server request was made
                imageSubmit.disabled = false;
                imageSubmit.textContent = 'Generate'; // Restore original text
                imagePrompt.disabled = false;
                return; // Stop execution
            }

            const originalButtonText = imageSubmit.textContent;

            imageSubmit.disabled = true;
            imageSubmit.textContent = 'Generating...';
            imagePrompt.disabled = true;

            let apiUrl;
            const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
            let fetchOptions = {
                method: 'POST',
                headers: {
                    'Accept': 'application/json',
                    'X-CSRF-Token': csrfToken // Add CSRF token to headers
                },
            };
            const formData = new FormData();

            formData.append('prompt', imagePrompt.value.trim()); 
            formData.append('modelId', modelSelect ? modelSelect.value : ''); 
            formData.append('style', styleSelectElement ? styleSelectElement.value : ''); 

            // Append style label and negative prompt regardless of route
            const styleLabelInput = document.getElementById('style-label-input'); 
            const negativePromptInput = document.getElementById('negative-prompt-input');
            if (styleLabelInput) {
                formData.append('styleLabel', styleLabelInput.value);
            }
            if (negativePromptInput) {
                formData.append('negativePromptOverride', negativePromptInput.value);
            }

            // Check if we have the actual file object for img2img
            if (uploadedFileObject) { 
                 console.log('[Create Image Tab] Image uploaded, using /image-to-image');
                 apiUrl = '/generate/image-to-image';
                 console.log('[Create Tab] Sending aspectRatio:', aspectRatioButton.dataset.value); // Log selected ratio from data-value
                 formData.append('aspectRatio', aspectRatioButton.dataset.value); // Send selected aspect ratio from data-value
                 formData.append('image', uploadedFileObject, uploadedFileObject.name); // Send the actual File object
                 formData.append('strength', imageStrengthSlider.value || '0.75'); 

                 // Include styleLabel along with style value
                 const selectedStyleOption = styleSelectElement ? styleSelectElement.options[styleSelectElement.selectedIndex] : null;
                 const styleLabel = selectedStyleOption ? selectedStyleOption.textContent : '';
                 console.log('[Create Image Tab] Sending styleLabel:', styleLabel);
                 formData.append('styleLabel', styleLabel);

                 fetchOptions.body = formData; // FormData for multipart/form-data
              } else {
                 apiUrl = '/generate/text-to-image'; // Update the fetch request URL for text-to-image generation to include the correct '/generate' prefix
                 const selectedOption = modelSelect ? modelSelect.options[modelSelect.selectedIndex] : null;
                 const selectedStyleOption = styleSelectElement ? styleSelectElement.options[styleSelectElement.selectedIndex] : null;
                 const styleId = selectedStyleOption ? selectedStyleOption.value : '';
                 const styleName = selectedStyleOption ? selectedStyleOption.text : ''; // Get the display text

                 fetchOptions.headers['Content-Type'] = 'application/json';
                 // Construct JSON payload for text-to-image
                 const payload = {
                     prompt: imagePrompt.value.trim(),
                     modelId: modelSelect ? modelSelect.value : '', 
                     aspectRatio: aspectRatioButton.dataset.value, // Send ratio for T2I too
                     style: styleId, // Send style ID (value)
                     styleName: styleName, // Send style Name (text)
                     // Add style label and negative prompt to JSON payload too
                     styleLabel: styleLabelInput ? styleLabelInput.value : '',
                     negativePromptOverride: negativePromptInput ? negativePromptInput.value : ''
                 };
                 fetchOptions.body = JSON.stringify(payload);
             }

            console.log('[Create Image Tab] Sending API request to', apiUrl, 'with options:', fetchOptions);

            // --- Placeholder Logic --- 
            const contentArea = document.querySelector('#chat-messages');

            // Clear content area only for the first generation in this 'session'
            if (isFirstGenerationInSession && contentArea) {
                console.log('[Create Tab] First generation in session, clearing content area.');
                contentArea.innerHTML = ''; // Clear previous content
                isFirstGenerationInSession = false; // Don't clear for subsequent generations
            }

            placeholderId = `placeholder-${Date.now()}`;
            const placeholderHtml = `
                <div id="${placeholderId}" class="image-placeholder bg-gray-800 p-4 rounded text-center text-gray-400 my-2">
                    <i class="fas fa-spinner fa-spin mr-2"></i>
                    Generating image... 
                    <span class="timer text-xs">(<span class="seconds">0</span>s)</span>
                </div>
            `;

            // Insert placeholder at the top
            contentArea.insertAdjacentHTML('afterbegin', placeholderHtml); 

            // Start timer
            const timerSpan = document.querySelector(`#${placeholderId} .seconds`);
            if (timerSpan) {
                timerIntervalId = setInterval(() => {
                    secondsElapsed++;
                    timerSpan.textContent = secondsElapsed;
                }, 1000);
            }
            // --- End Placeholder Logic --- 

            try {
                console.log(`[Create Image Tab] Sending API request to ${apiUrl}...`); 

                const response = await fetch(apiUrl, fetchOptions);
                console.log(`[Create Image Tab] API response status: ${response.status}`); 

                // Clear timer as soon as response is received
                if (timerIntervalId) {
                    clearInterval(timerIntervalId);
                    timerIntervalId = null;
                    console.log('[Create Tab] Timer cleared on response received.');
                }

                if (!response.ok) {
                    let errorMsg = `HTTP error! status: ${response.status}`;
                     try {
                         const errorData = await response.json();
                         errorMsg = errorData.error || errorMsg;
                     } catch (e) { console.log('[Create Image Tab] Could not parse error response as JSON.'); }
                    console.error('[Create Image Tab] API error:', errorMsg);
                    window.showToast(errorMsg, 'error');
                    // Update placeholder with error
                    const placeholderDiv = document.getElementById(placeholderId);
                    if (placeholderDiv) {
                        placeholderDiv.innerHTML = `<i class="fas fa-exclamation-triangle mr-2 text-red-500"></i> Error: ${errorMsg}`;
                        placeholderDiv.classList.add('text-red-400');
                        // Optionally remove the placeholder after a delay or leave it
                    }
                } else {
                    const result = await response.json();
                    console.log("[Create Image Tab] API success response:", result); 

                    const imgContainer = document.createElement('div');
                    imgContainer.classList.add('mb-4', 'p-2', 'bg-gray-800', 'rounded', 'generated-image-item'); 
            
                    const imgElement = document.createElement('img');
                    imgElement.src = result.imageUrl; 
                    imgElement.alt = result.prompt || imagePrompt.value.trim();
                    if (result.width && result.height) {
                        imgElement.width = result.width;
                        imgElement.height = result.height;
                    }
                    imgElement.style.maxWidth = '100%';
                    imgElement.style.height = 'auto';
                    imgElement.style.imageRendering = 'pixelated'; // Consider 'auto' or removing if pixelation isn't desired
                    imgElement.classList.add('rounded-lg');
                    imgContainer.appendChild(imgElement);
            
                    const promptElement = document.createElement('p');
                    promptElement.textContent = `Prompt: ${result.prompt || imagePrompt.value.trim()}`;
                    promptElement.classList.add('text-xs', 'text-gray-400', 'mt-1');
                    imgContainer.appendChild(promptElement);

                    // --- Replace Placeholder --- 
                    const placeholderDiv = document.getElementById(placeholderId);
                    if (placeholderDiv) {
                        console.log('[Create Tab] Replacing placeholder with generated image.');
                        placeholderDiv.replaceWith(imgContainer);
                    } else {
                        console.warn('[Create Tab] Placeholder not found, prepending image.');
                        const contentArea = document.querySelector('#chat-messages');
                        contentArea.prepend(imgContainer); // Fallback
                    }
                    // --- End Replace Placeholder --- 

                    // Update user credits display
                    if (typeof window.updateUserCreditsDisplay === 'function') {
                        window.updateUserCreditsDisplay();
                    } else {
                        console.warn('[Create Tab] updateUserCreditsDisplay function not found on window object.');
                    }
                }
            } catch (error) {
                console.error("[Create Image Tab] Image generation failed:", error); 
                window.showToast(`Error: ${error.message || 'Unknown error'}`, 'error');
                // Update placeholder with error
                const placeholderDiv = document.getElementById(placeholderId);
                if (placeholderDiv) {
                    placeholderDiv.innerHTML = `<i class="fas fa-exclamation-triangle mr-2 text-red-500"></i> Error: ${error.message || 'Unknown error'}`;
                    placeholderDiv.classList.add('text-red-400');
                }
                 // Clear timer in case of fetch error
                 if (timerIntervalId) {
                    clearInterval(timerIntervalId);
                    timerIntervalId = null;
                    console.log('[Create Tab] Timer cleared on catch error.');
                }
            } finally {
                console.log('[Create Image Tab] Executing finally block.');
                // Ensure timer is always cleared
                if (timerIntervalId) {
                    clearInterval(timerIntervalId);
                    timerIntervalId = null;
                }

                imageSubmit.disabled = false;
                imageSubmit.textContent = originalButtonText; 
                imagePrompt.disabled = false;

                toggleGenerateButtonState(); // Re-evaluate button state
            }
        });
        console.log('[DEBUG] Successfully added click listener.');
    }

    // Listener for model change to update styles and controls
    if (modelSelect) {
       modelSelect.addEventListener('change', () => {
           console.log('[Model Change] Detected. Updating controls.');
           updateControlsBasedOnState();
           updateCostDisplay(); // Call on change
           updateStyleDropdown(); // Update styles when model changes
       });
    }

    // Update hidden style inputs when style selection changes
    if (styleSelectElement) { 
        styleSelectElement.addEventListener('change', updateHiddenStyleInputs);
    } else {
        console.warn('[DOMContentLoaded] styleSelectElement element not found, cannot add change listener.');
    }

    // Add listener for image prompt input to enable/disable button
    if (imagePrompt) {
        imagePrompt.addEventListener('input', () => {
            autoResizeTextarea(imagePrompt);
        });
        imagePrompt.addEventListener('input', toggleGenerateButtonState);
    }

    // Function to get the selected style's label and negative prompt (if any)
    // NOTE: This needs adjustment if we load complex style objects later
    function updateHiddenStyleInputs() {
        // No need for hidden inputs if we only send the style name
        // const styleLabelInput = document.getElementById('style-label-input');
        // const negativePromptInput = document.getElementById('negative-prompt-input');
        // if (!styleSelectElement || !styleLabelInput || !negativePromptInput) return;

        // const selectedOption = styleSelectElement.options[styleSelectElement.selectedIndex];
        // const styleLabel = selectedOption ? selectedOption.text : ''; // We send this now as 'styleName'
        // const negativePromptOverride = selectedOption ? selectedOption.dataset.negativePrompt : ''; // Assuming data-negative-prompt might exist

        // If using prompt-based styling, the 'value' and 'text' are the same (the style name)
        // If using LoRAs, the 'value' is the ID, and 'text' is the name.
        // The backend currently uses req.body.styleName, which we added earlier.

        console.log(`Style changed. Selected value: ${styleSelectElement.value}, Selected text: ${styleSelectElement.options[styleSelectElement.selectedIndex]?.text}`);
    }

    // --- Setup Event Listeners ---
    if (imageUploadInput) {
        imageUploadInput.addEventListener('change', (e) => {
            console.log('[Create Tab] Image upload input change event fired');
            const file = e.target.files[0];
            if (file) {
                // Read file:
                const reader = new FileReader();
                reader.onload = (event) => {
                    console.log('[Create Tab] FileReader onload event fired - image loaded');
                    uploadedFileObject = file; // Store the File object itself, not the data URL
                    console.log('[Create Tab] File object stored in uploadedFileObject:', file.name);
                    // Update preview if available
                    if (thumbnail) {
                        thumbnail.src = event.target.result; // Data URL for preview
                        thumbnail.classList.remove('hidden');
                        console.log('[Create Tab] Preview image updated and shown');
                    } else {
                        console.warn('[Create Tab] thumbnail not found, cannot update preview');
                    }
                    if (placeholderIcon) {
                        placeholderIcon.classList.add('hidden');
                        console.log('[Create Tab] Placeholder hidden');
                    }
                    if (clearButton) {
                        clearButton.classList.remove('hidden');
                        console.log('[Create Tab] Clear button shown');
                    }
                    // Update controls based on new state
                    updateControlsBasedOnState();
                    updateCostDisplay(); // Update cost display after image upload
                    console.log('[Create Tab] Controls and cost updated after image upload');
                };
                reader.readAsDataURL(file); // Read as Data URL for preview image
                console.log('[Create Tab] Reading file as DataURL for preview...');
            } else {
                console.log('[Create Tab] No file selected in change event');
                // No file selected (possibly due to cancel)
                uploadedFileObject = null;
                if (thumbnail) {
                    thumbnail.classList.add('hidden');
                    console.log('[Create Tab] Preview image hidden (no file)');
                }
                if (placeholderIcon) {
                    placeholderIcon.classList.remove('hidden');
                    console.log('[Create Tab] Placeholder shown (no file)');
                }
                if (clearButton) {
                    clearButton.classList.add('hidden');
                    console.log('[Create Tab] Clear button hidden (no file)');
                }
                // Update controls based on new state
                updateControlsBasedOnState();
                updateCostDisplay(); // Update cost display after clearing image
                console.log('[Create Tab] Controls and cost updated after clearing image (no file selected)');
            }
        });
        console.log('[Create Tab] Image upload input listener attached');
    } else {
        console.warn('[Create Tab] imageUploadInput not found, cannot attach change listener');
    }

    if (clearButton) {
        clearButton.addEventListener('click', (e) => {
            console.log('[Create Tab] Clear upload button clicked');
            e.preventDefault();
            // Reset the input
            if (imageUploadInput) {
                imageUploadInput.value = '';
                console.log('[Create Tab] Image upload input value cleared');
            }
            uploadedFileObject = null;
            if (thumbnail) {
                thumbnail.classList.add('hidden');
                console.log('[Create Tab] Preview image hidden');
            }
            if (placeholderIcon) {
                placeholderIcon.classList.remove('hidden');
                console.log('[Create Tab] Placeholder shown');
            }
            clearButton.classList.add('hidden');
            console.log('[Create Tab] Clear button hidden');
            // Update controls based on new state
            updateControlsBasedOnState();
            updateCostDisplay(); // Update cost display after clearing image
            console.log('[Create Tab] Controls and cost updated after clearing image');
        });
        console.log('[Create Tab] Clear upload button listener attached');
    } else {
        console.warn('[Create Tab] clearButton not found, cannot attach click listener');
    }
});

===== public\js\edit-tab.js =====
// public/js/edit-tab.js
document.addEventListener('DOMContentLoaded', () => {
    const contentArea = document.getElementById('content-area');
    
    // Handle Text Save
    const textSubmit = document.querySelector('#edit-submit[data-mode="edit-text"]');
    if (textSubmit) {
        textSubmit.addEventListener('click', () => {
            const input = document.getElementById('edit-text-input');
            const message = input.value.trim();
            if (message) {
                contentArea.innerHTML += `<div class="chat-message">Edited Text: ${message}</div>`;
                input.value = '';
                contentArea.scrollTop = contentArea.scrollHeight;
            }
        });
    }

    // Handle Image Save (demo only)
    const imageSubmit = document.querySelector('#edit-submit[data-mode="edit-image"]');
    if (imageSubmit) {
        imageSubmit.addEventListener('click', () => {
            const input = document.getElementById('edit-image-input');
            const url = input.value.trim();
            if (url) {
                contentArea.innerHTML += `<div class="chat-message">Edited Image URL: ${url} (Hello World!)</div>`;
                input.value = '';
                contentArea.scrollTop = contentArea.scrollHeight;
            }
        });
    }
});

===== public\js\gallery.js =====
let page = 1;
let isLoading = false;
let hasMoreImages = true;
let currentContentId = null; // For the modal

// --- Toast Function (Ensure core.js provides showToast or define it here) ---
// Assuming showToast is globally available from core.js
// function showToast(message, type = 'success') { ... }

// --- Fullscreen Modal Functions ---
function openFullscreenModal(imageUrl) {
    console.log('[gallery.js] openFullscreenModal called');
    const modal = document.getElementById('fullscreen-modal');
    const img = document.getElementById('fullscreen-image');
    if (modal && img) {
        img.src = imageUrl;
        modal.classList.remove('hidden');
    } else {
        console.error('[gallery.js] openFullscreenModal: Could not find modal or img element!');
    }
}

// Close function might need adjustment based on final modal structure
function closeFullscreenModal() {
    console.log('[gallery.js] closeFullscreenModal called.');
    const modal = document.getElementById('fullscreen-modal');
    if (modal) {
        modal.classList.add('hidden');
        const img = document.getElementById('fullscreen-image');
        if (img) img.src = ''; // Clear image src on close
    } else {
        console.error('[gallery.js] closeFullscreenModal: Could not find modal element!');
    }
}

// Add DOMContentLoaded listener for the MAIN fullscreen close button
document.addEventListener('DOMContentLoaded', () => {
    // Find the close button defined in layout.ejs or modals.ejs for the main fullscreen view
    const closeButton = document.getElementById('close-fullscreen-modal'); // Use the ID from layout/modals
    if (closeButton) {
        console.log('[gallery.js] Attaching DOMContentLoaded listener to main close button:', closeButton);
        closeButton.addEventListener('click', (event) => {
            event.stopPropagation(); // Prevent background click if needed
            console.log('[gallery.js] Main close button clicked (DOMContentLoaded listener).');
            closeFullscreenModal();
        });
    } else {
        // This might log if the fullscreen modal ID in layout/modals differs
        console.warn("[gallery.js] Main fullscreen modal close button (#close-fullscreen-modal) not found on DOMContentLoaded!");
    }
});

// --- Share Link Function ---
function updateShareLinks(contentId) {
    const baseUrl = window.location.origin;
    const shareUrl = `${baseUrl}/image/${contentId}`; // Changed to /image/:id
    const shareText = 'Check out this cool AI content from Pixzor!';
    const modalImageElement = document.getElementById('modal-image');
    const imageUrl = modalImageElement ? modalImageElement.src : '';

    const fb = document.getElementById('share-facebook');
    const tw = document.getElementById('share-twitter');
    const pin = document.getElementById('share-pinterest');

    if (fb) fb.href = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareUrl)}`;
    if (tw) tw.href = `https://twitter.com/intent/tweet?url=${encodeURIComponent(shareUrl)}&text=${encodeURIComponent(shareText)}`;
    if (pin && imageUrl) pin.href = `https://pinterest.com/pin/create/button/?url=${encodeURIComponent(shareUrl)}&media=${encodeURIComponent(imageUrl)}&description=${encodeURIComponent(shareText)}`;
    else if (pin) pin.href = '#';
}

// --- Load Comments Function ---
async function loadComments(contentId) {
    const commentsList = document.getElementById('comments-list');
    if (!commentsList) {
        console.error('[gallery.js] Comments list container not found.');
        return;
    }
    commentsList.innerHTML = '<li>Loading comments...</li>';
    try {
        const response = await fetch(`/api/content/${contentId}/comments`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const comments = await response.json();
        console.log('[loadComments] Raw comments received from API:', comments); // Log raw data
        if (comments.length === 0) {
            commentsList.innerHTML = '<li class="text-gray-400 italic">No comments yet.</li>';
        } else {
            commentsList.innerHTML = comments.map(comment => `
                <li class="comment-item border-b border-gray-700 pb-2 mb-2" data-comment-id="${comment.id}">
                    <div class="flex items-center mb-1">
                        <img src="${comment.user.photo || '/images/default-avatar.png'}" alt="${comment.user.username}" class="w-6 h-6 rounded-full mr-2">
                        <span class="font-semibold text-sm mr-2">${comment.user.username}</span>
                        <span class="text-gray-400 text-xs">${new Date(comment.createdAt).toLocaleString()}</span>
                    </div>
                    <p class="text-gray-300 text-sm break-words">${escapeHTML(comment.commentText)}</p>
                </li>
            `).join('');
        }
    } catch (error) {
        console.error('Error loading comments:', error);
        commentsList.innerHTML = '<li class="text-red-500">Error loading comments.</li>';
        showToast('Failed to load comments.', 'error');
    }
}

// --- Post Comment Function ---
async function postComment(contentId) {
    const commentInput = document.getElementById('comment-input');
    const postCommentButton = document.getElementById('post-comment');
    if (!commentInput || !postCommentButton) {
        console.error('[gallery.js] Comment input or post button not found.');
        return;
    }
    const commentText = commentInput.value.trim();
    if (!commentText) {
        showToast('Comment cannot be empty.', 'error');
        return;
    }
    postCommentButton.disabled = true;
    postCommentButton.textContent = 'Posting...';
    try {
        const response = await fetch(`/api/content/${contentId}/comments`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                // Add CSRF token header if needed by your backend setup
            },
            body: JSON.stringify({ text: commentText }) // Changed 'commentText' to 'text'
        });
        const result = await response.json();
        if (!response.ok) {
            throw new Error(result.error || `HTTP error! status: ${response.status}`);
        }
        commentInput.value = '';
        showToast('Comment posted!', 'success');
        await loadComments(contentId); // Reload comments to show the new one
    } catch (error) {
        console.error('Error posting comment:', error);
        showToast(`Failed to post comment: ${error.message}`, 'error');
    } finally {
        postCommentButton.disabled = false;
        postCommentButton.textContent = 'Post';
    }
}

// --- Comments Modal Function (Handles opening, details fetching, and listener setup) ---
// --- Comments Modal Function ---
function openCommentsModal(contentId, imageUrl) {
    console.log(`[gallery.js] openCommentsModal called. ID: ${contentId}`);
    currentContentId = contentId;
    const modal = document.getElementById('comments-modal');
    
    if (!modal) {
        console.error('[gallery.js] Comments modal not found');
        showToast('Could not open image details.', 'error');
        return;
    }

    const elements = {
        modalImage: modal.querySelector('#modal-image'),
        modalPrompt: modal.querySelector('#modal-prompt'),
        modalUsername: modal.querySelector('#modal-username'),
        downloadButton: modal.querySelector('#download-button'),
        commentsList: modal.querySelector('#comments-list'),
        commentInput: modal.querySelector('#comment-input'),
        postCommentButton: modal.querySelector('#post-comment'),
        modalModelElement: modal.querySelector('#modal-model'),
        modelContainer: modal.querySelector('#model-container'),
        deleteBtnContainer: modal.querySelector('#delete-button-container'),
        deleteBtn: modal.querySelector('#delete-button-modal'),
        shareBtnContainer: modal.querySelector('#share-button-container'),
        shareBtn: modal.querySelector('#share-button-modal'),
        closeCommentsBtn: modal.querySelector('#close-comments-modal'),
        copyPromptButton: modal.querySelector('#copy-prompt'),
        fullscreenIconButton: modal.querySelector('#fullscreen-icon')
    };

    for (const key in elements) {
        if (!elements[key]) {
            const likelyId = key.replace(/([A-Z])/g, '-$1').toLowerCase();
            console.error(`[gallery.js] Comments modal element not found: #${likelyId}`);
            showToast("Error opening image details.", "error");
            return;
        }
    }

    history.pushState({ contentId, section: 'gallery', modal: true }, '', `/image/${contentId}`);
    document.title = elements.modalPrompt.textContent?.substring(0, 50) + '... | Pixzor' || 'Image Details | Pixzor';

    elements.commentsList.innerHTML = '<li>Loading comments...</li>';
    elements.commentInput.value = '';
    elements.deleteBtnContainer.classList.add('hidden');
    elements.shareBtnContainer.classList.add('hidden');
    elements.modelContainer.classList.add('hidden'); 
    elements.modalPrompt.textContent = 'Loading...';
    elements.modalUsername.textContent = 'Loading...';
    elements.modalModelElement.textContent = '';
    elements.modalImage.src = imageUrl || ''; 
    
    elements.downloadButton.href = `/api/download-image/${contentId}`; 
    elements.downloadButton.download = `pixzor_content_${contentId}.jpg`;

    if (window.isLoggedIn) {
        elements.commentInput.disabled = false;
        elements.postCommentButton.disabled = false;
        elements.commentInput.placeholder = "Write a comment...";
    } else {
        elements.commentInput.disabled = true;
        elements.postCommentButton.disabled = true;
        elements.commentInput.placeholder = "Login to comment";
    }

    elements.closeCommentsBtn.onclick = () => {
        console.log('[gallery.js] Close button clicked');
        modal.classList.add('hidden');
        currentContentId = null;
        history.back();
    };

    elements.copyPromptButton.onclick = () => {
        const promptText = elements.modalPrompt.textContent.trim();
        if (promptText && promptText !== 'Loading...' && promptText !== 'No prompt available.') {
            navigator.clipboard.writeText(promptText)
                .then(() => showToast('Prompt copied!', 'success'))
                .catch(err => {
                    console.error('Failed to copy prompt:', err);
                    showToast('Failed to copy prompt.', 'error');
                });
        } else {
            showToast('No prompt to copy.', 'info');
        }
    };

    elements.fullscreenIconButton.onclick = (e) => {
        e.stopPropagation(); 
        if (elements.modalImage.src) {
            openFullscreenModal(elements.modalImage.src);
        }
    };

    elements.postCommentButton.onclick = () => {
        if (elements.postCommentButton.disabled) {
            showToast("Please Login to comment", "info");
        } else if (currentContentId) {
            postComment(currentContentId);
        }
    };

    elements.deleteBtn.onclick = async () => {
        const contentIdToDelete = currentContentId; 
        if (!contentIdToDelete) {
            showToast('Cannot delete: Content ID missing.', 'error');
            return;
        }
        if (confirm('Are you sure you want to delete this image permanently?')) {
            try {
                const csrfToken = document.querySelector('meta[name="csrf-token"]').getAttribute('content');
                const response = await fetch(`/api/content/${contentIdToDelete}`, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-Token': csrfToken
                    }
                });
                const result = await response.json();
                if (response.ok) {
                    showToast(result.message || 'Image deleted successfully.', 'success');
                    const elementToRemove = document.getElementById(`image-card-${contentIdToDelete}`);
                    console.log('[gallery.js] Delete attempt. Element to remove:', elementToRemove, 'Current window.masonryInstance:', window.masonryInstance);
                    if (elementToRemove && window.masonryInstance && typeof window.masonryInstance.remove === 'function' && typeof window.masonryInstance.layout === 'function') {
                        console.log('[gallery.js] Removing item from Masonry and DOM using valid masonryInstance.');
                        window.masonryInstance.remove(elementToRemove);
                        elementToRemove.remove();
                        window.masonryInstance.layout();
                    } else if (elementToRemove) {
                        console.log('[gallery.js] masonryInstance not found or invalid during delete. Removing item from DOM only. Masonry instance was:', window.masonryInstance);
                        elementToRemove.remove();
                    }
                    modal.classList.add('hidden');
                    // history.back(); // We will navigate or reload explicitly

                    // Refresh the view
                    const currentPath = window.location.pathname;
                    const historyState = history.state; // Get current history state

                    console.log(`[gallery.js] Post-delete: currentPath='${currentPath}', historyState=`, historyState);

                    if (currentPath.startsWith('/gallery') || currentPath === '/' || (historyState && historyState.section === 'gallery')) {
                        console.log('[gallery.js] Refreshing gallery view by calling initializeGallery.');
                        if (typeof initializeGallery === 'function') {
                            initializeGallery();
                        } else {
                            console.error('[gallery.js] initializeGallery function not found for refresh.');
                            history.back(); // Fallback
                        }
                    } else if (currentPath.startsWith('/files') || (historyState && historyState.section === 'files')) {
                        console.log('[gallery.js] Refreshing files view by clicking sidebar item.');
                        const filesSidebarItem = document.querySelector('.sidebar-item[data-section="files"]');
                        if (filesSidebarItem) {
                            filesSidebarItem.click(); // Simulate click to reload files section
                        } else {
                            console.error('[gallery.js] Files sidebar item not found for refresh.');
                            history.back(); // Fallback
                        }
                    } else {
                         // Fallback for direct /image/:id or unknown states
                        console.log('[gallery.js] Deletion successful. Navigating back or reloading.');
                        if (document.referrer && (document.referrer.includes('/gallery') || document.referrer.includes('/files'))) {
                            history.back(); // If previous page was gallery or files, go back
                        } else {
                            window.location.href = '/gallery'; // Fallback to gallery
                        }
                    }
                } else {
                    throw new Error(result.error || 'Failed to delete image.');
                }
            } catch (error) {
                console.error('Error deleting content:', error);
                showToast(`Deletion failed: ${error.message}`, 'error');
            }
        }
    };

    elements.shareBtn.onclick = () => {
        const shareUrl = `${window.location.origin}/image/${currentContentId}`;
        navigator.clipboard.writeText(shareUrl)
            .then(() => {
                showToast('Link copied to clipboard!', 'success');
            })
            .catch(err => {
                console.error('Failed to copy share link:', err);
                showToast('Could not copy link.', 'error');
            });
    };

    fetch(`/api/content-details/${contentId}`)
        .then(response => response.ok ? response.json() : Promise.reject('Failed to load details'))
        .then(data => {
            elements.modalPrompt.textContent = data.prompt || 'No prompt available.';
            elements.modalUsername.textContent = data.user?.username || 'Unknown'; 
            if (data.model) {
                elements.modalModelElement.textContent = data.model;
                elements.modelContainer.classList.remove('hidden');
            }
            if (data.isOwner) {
                elements.deleteBtnContainer.classList.remove('hidden');
            }
            if (data.isPublic || data.isOwner) {
                elements.shareBtnContainer.classList.remove('hidden');
            }
            loadComments(contentId);
            modal.classList.remove('hidden');
            updateShareLinks(contentId);
        })
        .catch(error => {
            console.error("Error fetching content details:", error);
            showToast('Could not load content details.', 'error');
            elements.commentsList.innerHTML = '<li>Error loading comments.</li>';
            modal.classList.add('hidden');
            elements.modalPrompt.textContent = 'Error loading details.';
            elements.modalUsername.textContent = 'Error';
        });
}

// --- Helper: Escape HTML --- 
function escapeHTML(str) {
    // Add null/undefined check and logging
    if (str === null || typeof str === 'undefined') {
        console.warn('[escapeHTML] Received null or undefined input.');
        return ''; 
    }
    console.log('[escapeHTML] Input string:', str); // Log input
    const div = document.createElement('div');
    div.textContent = str;
    return div.innerHTML;
}

// --- Image Card Creation ---
function createImageCard(image) {
    const imageCard = document.createElement('div');
    imageCard.classList.add('image-card', 'relative', 'group', 'cursor-pointer');
    imageCard.dataset.id = image.id;
    imageCard.id = `image-card-${image.id}`;

    imageCard.innerHTML = `
        <img src="${image.thumbnailUrl ?? image.contentUrl}" 
             alt="${image.prompt?.substring(0, 50) || 'AI Content'}..." 
             class="w-full rounded-lg cursor-pointer block object-cover transition-transform duration-200 ease-in-out group-hover:scale-105" 
             loading="lazy" />
        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-opacity duration-200 ease-in-out rounded-lg"></div>
        <p class="text-sm text-gray-600 mt-2">${image.prompt ? image.prompt.substring(0, 50) + '...' : 'No description'}</p>
        ${window.isLoggedIn && image.isOwner ? `
            <button class="toggle-public-btn absolute top-2 left-2 bg-gray-800 text-white p-2 rounded-full hover:bg-gray-700"
                    data-id="${image.id}" data-public="${image.isPublic ? '1' : '0'}"
                    title="${image.isPublic ? 'Make Private' : 'Make Public'}">
                <i class="fas ${image.isPublic ? 'fa-lock' : 'fa-globe'}"></i>
            </button>
        ` : ''}
        <div class="like-container absolute top-2 right-2 flex flex-col items-center space-y-0"> {/* Changed to flex-col, removed bg and padding */}
            <button class="like-btn ${image.isLikedByUser ? 'text-red-500' : 'text-gray-700'} hover:text-red-500" {/* Simplified: red if liked, dark gray if not. Hover always makes it red. */}
                    data-id="${image.id}" title="${image.isLikedByUser ? 'Unlike' : 'Like'}"
                    ${window.isLoggedIn ? '' : 'disabled'}>
                <i class="fas fa-heart text-2xl"></i>
            </button>
            <span class="like-count text-xs text-gray-200" data-id="${image.id}">${image.likeCount || 0}</span> {/* Adjusted text size/color for visibility */}
        </div>
    `;
    return imageCard;
}

// --- Load Images Function ---
async function loadImages() {
    if (isLoading || !hasMoreImages) return;
    isLoading = true;
    const loadingIndicator = document.getElementById('loading-indicator'); 
    if(loadingIndicator) loadingIndicator.style.display = 'block';

    try {
        const response = await fetch(`/api/gallery-content?page=${page}`);
        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }
        const data = await response.json();
        const images = data.items; // API returns 'items' array
        const imageList = document.getElementById('image-list');

        if (!imageList || !window.masonryInstance) {
             console.error('[gallery.js] loadImages: Image list or Masonry instance not found.');
             if(loadingIndicator) loadingIndicator.style.display = 'none';
             isLoading = false;
             return; 
        }

        if (images.length === 0) {
             if (page === 1) {
                imageList.innerHTML = '<p class="text-white text-center col-span-full">No images found.</p>';
             } else {
                 if(loadingIndicator) loadingIndicator.textContent = 'No more images.';
             }
            hasMoreImages = false;
            if(loadingIndicator && page > 1) { /* Keep visible */ } else if (loadingIndicator) { loadingIndicator.style.display = 'none'; }
            return;
        }

        const fragment = document.createDocumentFragment();
        const newItems = [];
        images.forEach((image) => {
            const imageCard = createImageCard(image);
            fragment.appendChild(imageCard);
            newItems.push(imageCard);
        });

        imageList.appendChild(fragment);

        imagesLoaded(imageList).on('always', function() {
             console.log('[gallery.js] imagesLoaded complete, appending/layout Masonry.');
            window.masonryInstance.appended(newItems);
            window.masonryInstance.layout();
        });

        hasMoreImages = data.hasMore;
        if (hasMoreImages) {
            page++;
        } else {
             if(loadingIndicator) loadingIndicator.textContent = 'No more images.';
        }

    } catch (error) {
        console.error(`Error loading images:`, error);
        showToast('An error occurred while loading images.', 'error');
        if(loadingIndicator) loadingIndicator.textContent = 'Error loading images.';
        hasMoreImages = false; 
    } finally {
        isLoading = false;
        if(loadingIndicator && (loadingIndicator.textContent === 'No more images.' || loadingIndicator.textContent === 'Error loading images.')) {
            // Keep visible
        } else if (loadingIndicator) {
            loadingIndicator.style.display = 'none';
        }
    }
}



// --- Initialization Function ---

function initializeGallery() {         

    const contentArea = document.getElementById('content-area') || document.getElementById('chat-messages');
    if (!contentArea) {
        console.error('[gallery.js] Content area not found');
        return;
    }
    
    contentArea.innerHTML = '<p class="text-center text-gray-400 p-4">Loading gallery...</p>';
    
    fetch('/api/gallery-content')
        .then(response => {
            console.log(`[Gallery Load] Response status: ${response.status}`);
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            return response.json();
        })
        .then(data => {
            console.log('[Gallery Load] Data received:', data);
            let html;
            if (data.items && data.items.length > 0) {
                const gridItems = data.items.map(item => `
                    <div id="image-card-${item.id}" class="image-card relative group cursor-pointer" data-id="${item.id}">
                        <img src="${item.thumbnailUrl || item.contentUrl}" 
                             alt="${item.prompt?.substring(0, 50) || 'Gallery image'}..." 
                             class="w-full h-full object-cover rounded-lg transition-transform duration-200 ease-in-out group-hover:scale-105"
                             loading="lazy">
                        <div class="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-40 transition-opacity duration-200 ease-in-out rounded-lg"></div>
                        <p class="text-sm text-gray-600 mt-2">${item.prompt ? item.prompt.substring(0, 50) + '...' : 'No description'}</p>
                        ${window.isLoggedIn && item.isOwner ? `
                            <button class="toggle-public-btn absolute top-2 left-2 bg-gray-800 text-white p-2 rounded-full hover:bg-gray-700"
                                    data-id="${item.id}" data-public="${item.isPublic ? '1' : '0'}"
                                    title="${item.isPublic ? 'Make Private' : 'Make Public'}">
                                <i class="fas ${item.isPublic ? 'fa-lock' : 'fa-globe'}"></i>
                            </button>
                        ` : ''}
                        <div class="like-container absolute top-2 right-2 flex items-center space-x-1 bg-white bg-opacity-75 rounded px-1 py-1">
                            <button class="like-btn text-gray-500 hover:text-red-500 ${item.isLikedByUser ? 'text-red-500' : ''}" 
                                    data-id="${item.id}" title="${item.isLikedByUser ? 'Unlike' : 'Like'}" 
                                    ${window.isLoggedIn ? '' : 'disabled'}>
                                <i class="fas fa-heart"></i>
                            </button>
                            <span class="like-count text-sm text-gray-500" data-id="${item.id}">${item.likeCount || 0}</span>
                        </div>
                    </div>
                `).join('');
                // Ensure the grid-sizer is part of the generated HTML for image-list
                html = `<div id="image-list" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 p-4">
                          <div class="grid-sizer"></div>
                          ${gridItems}
                        </div>`;
            } else {
                // If no items, still provide the image-list container for consistency, Masonry might not initialize though.
                html = `<div id="image-list" class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 xl:grid-cols-6 gap-3 p-4">
                          <div class="grid-sizer"></div>
                          <p class="text-center text-gray-400 p-4 col-span-full">No images in the gallery yet.</p>
                        </div>`;
            }
            contentArea.innerHTML = html;

            // Initialize Masonry (if used)
            const imageListElement = document.getElementById('image-list');
            if (typeof Masonry !== 'undefined' && imageListElement && data.items && data.items.length > 0) { // Ensure grid exists and has items
                try {
                    const msnry = new Masonry('#image-list', { // Target #image-list
                        itemSelector: '.image-card',
                        columnWidth: '.grid-sizer', // Use the sizer element for column width
                        gutter: 12,
                        percentPosition: true
                    });
                    window.masonryInstance = msnry;
                    console.log('[gallery.js] Masonry instance CREATED and assigned for #image-list:', window.masonryInstance);

                    // Ensure layout after initial images are loaded
                    imagesLoaded(imageListElement).on('always', function () {
                        console.log('[gallery.js] Initial images loaded (initializeGallery), layout Masonry.');
                        if (window.masonryInstance) {
                            window.masonryInstance.layout();
                        }
                    });
                } catch (e) {
                    console.error('[gallery.js] Error initializing Masonry in initializeGallery:', e);
                    window.masonryInstance = null; // Ensure it's null if init failed
                }
            } else {
                console.log('[gallery.js] Masonry NOT initialized in initializeGallery. Conditions: Masonry lib loaded?', !!(typeof Masonry !== 'undefined'), 'imageListElement exists?', !!imageListElement, 'Has items?', !!(data.items && data.items.length > 0));
                window.masonryInstance = null; // Ensure it's null if not initialized
            }
            
            // Explicitly initialize like buttons after HTML is set
            console.log('[gallery.js] Gallery HTML injected. Calling initializeLikeButtons().');
            initializeLikeButtons();

            // Add click handler for image cards (delegated from contentArea)
            // This existing handler should be fine, as it delegates.
            // We just need to make sure initializeLikeButtons is called for direct listeners.
            contentArea.addEventListener('click', (event) => {
                const imageCard = event.target.closest('.image-card');
                const toggleBtn = event.target.closest('.toggle-public-btn');
                
                const likeBtn = event.target.closest('.like-btn');
                if (toggleBtn || likeBtn) {
                    // Skip if clicking toggle or like button
                    return;
                }
                
                if (toggleBtn) {
                    const contentId = toggleBtn.dataset.id;
                    const isPublic = toggleBtn.dataset.public === '1';
                    console.log(`[Gallery Click] Toggling public status for ID: ${contentId}, Current isPublic: ${isPublic}`);
                    
                    fetch(`/api/content/${contentId}`, {
                        method: 'PATCH',
                        headers: {
                            'Content-Type': 'application/json',
                            'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]')?.content || ''
                        },
                        body: JSON.stringify({ isPublic: !isPublic })
                    })
                        .then(response => response.json())
                        .then(result => {
                            if (result.success) {
                                toggleBtn.dataset.public = isPublic ? '0' : '1';
                                toggleBtn.title = isPublic ? 'Make Public' : 'Make Private';
                                toggleBtn.querySelector('i').className = `fas ${isPublic ? 'fa-globe' : 'fa-lock'}`;
                                showToast(`Image is now ${isPublic ? 'private' : 'public'}.`, 'success');
                                if (isPublic) {
                                    document.getElementById(`image-card-${contentId}`)?.remove();
                                    if (window.masonryInstance) {
                                        window.masonryInstance.layout();
                                    }
                                }
                            } else {
                                throw new Error(result.error || 'Failed to update visibility');
                            }
                        })
                        .catch(error => {
                            console.error('[Gallery Toggle] Error:', error);
                            showToast(`Failed to update visibility: ${error.message}`, 'error');
                        });
                    return;
                }

                if (imageCard) {
                    const contentId = imageCard.dataset.id;
                    const imgElement = imageCard.querySelector('img');
                    const imageUrl = imgElement?.src;
                    console.log(`[Gallery Click] Clicked image card. ID: ${contentId}, URL: ${imageUrl}`);
                    if (window.openCommentsModal) {
                        openCommentsModal(contentId, imageUrl);
                    }
                }
            });
        })
        .catch(error => {
            console.error('[Gallery Load] Error:', error);
            contentArea.innerHTML = `<p class="text-center text-red-500 p-4">Error loading gallery: ${error.message}</p>`;
        });
}

// Named handler for image card clicks
function handleImageCardClick(event) {
    const imageCard = event.target.closest('.image-card');
    if (imageCard) {
        const contentId = imageCard.dataset.id;
        const imgElement = imageCard.querySelector('img');
        const imageUrl = imgElement?.src; // Get the actual displayed image URL
        
        if (contentId && imageUrl) {
            openCommentsModal(contentId, imageUrl);
        } else {
            console.error('[gallery.js] Clicked image card missing content ID or image URL.', { contentId, imageUrl });
            showToast('Could not open image details.', 'error');
        }
    }
}
        
// Like/Unlike functionality
function initializeLikeButtons() {
    console.log('[gallery.js] Attempting to initialize like buttons...');
    // Use #image-list as this is the ID used by initializeGallery and loadImages
    const likeButtons = document.querySelectorAll('#image-list .like-btn');
    console.log(`[gallery.js] Found ${likeButtons.length} like buttons within #image-list.`);

    // Removed the broader check as we are now targeting the correct container for gallery view.
    // If this function is also used by other views (like #file-list), those views must ensure their
    // like buttons are also selectable or call this function with a specific context.

    likeButtons.forEach((button, index) => {
        console.log(`[gallery.js] Processing button ${index + 1} with ID: ${button.dataset.id}`);
        if (button.dataset.listenerAttached === 'true') {
            console.log(`[gallery.js] Listener already attached to button ${button.dataset.id}. Skipping.`);
            return;
        }
        button.dataset.listenerAttached = 'true'; // Use a more descriptive dataset property
        console.log(`[gallery.js] Attaching click listener to like button with ID: ${button.dataset.id}`);
        
        button.addEventListener('click', async (event) => {
            console.log(`[Like Button] Click event fired for button ID: ${button.dataset.id}`);
            event.preventDefault();
            event.stopPropagation();
            if (button.disabled) {
                showToast('Please log in to like images.', 'error');
                return;
            }
            const contentId = button.dataset.id;
            const likeContainer = button.closest('.like-container');
            if (!likeContainer) {
                console.error(`[Like Button] Like container not found for button with ID: ${contentId}`);
                showToast('Error interacting with like button.', 'error');
                return;
            }
            const likeCountSpan = likeContainer.querySelector(`.like-count[data-id="${contentId}"]`);

            if (!likeCountSpan) {
                console.error(`[Like Button] Like count span not found for ID: ${contentId}`);
                showToast('Error updating like count. Span not found.', 'error');
                return;
            }

            button.disabled = true; // Disable button during operation

            let isLiked = button.classList.contains('text-red-500');
            let currentCount = parseInt(likeCountSpan.textContent) || 0;

            const originallyLiked = isLiked;
            const originalCount = currentCount;
            const originalTitle = button.title;

            // Optimistic UI Update
            if (originallyLiked) { // User wants to unlike
                button.classList.remove('text-red-500');
                button.classList.add('text-gray-500');
                button.title = 'Like';
                likeCountSpan.textContent = Math.max(0, originalCount - 1);
            } else { // User wants to like
                button.classList.add('text-red-500');
                button.classList.remove('text-gray-500');
                button.title = 'Unlike';
                likeCountSpan.textContent = originalCount + 1;
            }

            try {
                const csrfToken = document.querySelector('meta[name="csrf-token"]')?.content || '';
                const response = await fetch(`/api/content/${contentId}/like`, {
                    method: originallyLiked ? 'DELETE' : 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-Token': csrfToken
                    },
                    credentials: 'include'
                });

                if (!response.ok) {
                    let errorMsg = `Failed to ${originallyLiked ? 'unlike' : 'like'}. Status: ${response.status}`;
                    try {
                        const errorData = await response.json();
                        errorMsg = errorData.error || errorData.message || errorMsg;
                    } catch (e) {
                        try {
                            const textError = await response.text();
                            if (textError) errorMsg += `: ${textError.substring(0, 100)}`;
                        } catch (e2) { /* ignore */ }
                    }
                    throw new Error(errorMsg);
                }

                const newLikeStatus = await response.json();
                console.log('[Like API Response]', newLikeStatus); // Log server response for debugging

                // Update UI with server's truth, defensively
                if (typeof newLikeStatus.likeCount === 'number') {
                    likeCountSpan.textContent = newLikeStatus.likeCount;
                } else {
                    console.warn('[Like API] likeCount is missing or not a number:', newLikeStatus.likeCount);
                }

                if (typeof newLikeStatus.isLiked === 'boolean') {
                    if (newLikeStatus.isLiked) {
                        button.classList.add('text-red-500');
                        button.classList.remove('text-gray-500');
                        button.title = 'Unlike';
                    } else {
                        button.classList.remove('text-red-500');
                        button.classList.add('text-gray-500');
                        button.title = 'Like';
                    }
                } else {
                    console.warn('[Like API] isLiked is missing or not a boolean:', newLikeStatus.isLiked);
                }
                showToast(originallyLiked ? 'Image unliked.' : 'Image liked!', 'success');

            } catch (error) {
                console.error('[Like] Error:', error);
                showToast(`${error.message}`, 'error');

                // Revert UI on API error
                if (originallyLiked) {
                    button.classList.add('text-red-500');
                    button.classList.remove('text-gray-500');
                } else {
                    button.classList.remove('text-red-500');
                    button.classList.add('text-gray-500');
                }
                button.title = originalTitle;
                likeCountSpan.textContent = originalCount;
            } finally {
                button.disabled = false; // Re-enable button
            }
        });
    });
}



const observer = new MutationObserver(() => initializeLikeButtons());
observer.observe(document.querySelector('#gallery-grid') || document.querySelector('#image-list'), { childList: true });

observer.observe(document.querySelector('#image-list'), { childList: true });

// Attach like button listeners on gallery load and updates
document.addEventListener('DOMContentLoaded', () => {
    if (document.querySelector('#image-list')) {
        initializeLikeButtons();
    }
});


// --- END Initialization Function ---

===== public\js\payment.js =====
document.addEventListener('DOMContentLoaded', () => {
    const buyTokensForm = document.getElementById('buy-tokens-form');
    if (buyTokensForm) {
        buyTokensForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const tokenBundle = document.getElementById('token-bundle');
            const tokens = tokenBundle.value;
            const price = tokenBundle.options[tokenBundle.selectedIndex].dataset.price;

            try {
                const response = await fetch('/payment/create-checkout-session', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        tokens,
                        price
                    }),
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.error || 'Payment failed');
                }

                const { sessionId } = await response.json();
                const stripe = Stripe(process.env.STRIPE_PUBLISHABLE_KEY || 'your-publishable-key');
                stripe.redirectToCheckout({ sessionId });
            } catch (error) {
                console.error('Payment error:', error);
                alert('Payment failed: ' + error.message);
            }
        });
    }
});


===== public\js\upscale-tab.js =====
document.querySelector('#upscale-tab #chat-submit').addEventListener('click', () => {
    const input = document.getElementById('upscale-input').value.trim();
    if (input) {
        window.location.href = `/upscale-image?prompt=${encodeURIComponent(input)}`;
    } else {
        alert('Please enter a prompt!');
    }
});

===== views\error.ejs =====
<style>
    .error-container {
        padding: 2rem;
        text-align: center;
        color: #d1d5db;
        background: #1f2937;
        border-radius: 8px;
        margin: 2rem auto;
        max-width: 600px;
    }
    .error-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 1rem;
    }
    .error-message {
        font-size: 1rem;
        margin-bottom: 1.5rem;
    }
    .btn-home {
        background: #3B82F6;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        text-decoration: none;
    }
    .btn-home:hover {
        background: #2563EB;
    }
</style>

<div class="error-container">
    <h1 class="error-title"><%= title %></h1>
    <p class="error-message"><%= message %></p>
    <a href="/" class="btn-home">Return to Home</a>
</div>

===== views\gallery.ejs =====
<!-- views/gallery.ejs -->
<div class="container mx-auto px-4 py-8">
    <h1 class="text-3xl font-bold mb-6 text-center">Gallery</h1>

    <!-- Masonry Container -->
    <div id="image-list" class="mx-auto">
        <!-- .grid-sizer is required for fluid Masonry column width -->
        <div class="grid-sizer"></div>
        <!-- Image cards will be loaded here by JavaScript -->
    </div>

    <!-- Loading indicator -->
    <div id="loading-indicator" class="text-center py-4" style="display: none;">
        <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-white"></div>
        <span class="ml-2">Loading more...</span>
    </div>
</div>

<!-- Comments Modal (MOVED TO partials/modals.ejs) -->

<!-- Fullscreen Modal (This specific instance might be redundant if one exists globally) -->
<!-- Check if the one in partials/modals.ejs is sufficient -->
<!-- 
<div id="fullscreen-modal" class="fixed inset-0 bg-black hidden z-50">
    <div class="absolute inset-0 flex items-center justify-center">
        <img id="fullscreen-image" src="" alt="Fullscreen Image" class="max-h-screen max-w-screen">
        <button onclick="closeFullscreenModal()" 
                class="absolute top-4 right-4 text-white hover:text-gray-300">
            <i class="fas fa-times text-2xl"></i>
        </button>
    </div>
</div>
-->

<!-- Include required scripts -->
<script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
<script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>
<script src="/js/gallery.js" defer></script> 

===== views\image-detail.ejs =====
<style>
    .image-detail-container {
        padding: 1rem;
        box-sizing: border-box;
        background: transparent;
    }
    .image-detail-image {
        max-width: 100%;
        height: auto;
        border-radius: 8px;
    }
    .btn-primary {
        background: #3B82F6;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        text-align: center;
        display: inline-block;
    }
    .btn-primary:hover {
        background: #2563EB;
    }
    .comments-list {
        max-height: 300px;
        overflow-y: auto;
    }
    .comment-item {
        border-bottom: 1px solid #4B5563;
    }
    .comment-item:last-child {
        border-bottom: none;
    }
    .share-buttons {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
        margin-bottom: 1rem;
    }
    .share-button {
        background: #374151;
        color: white;
        padding: 0.5rem;
        border-radius: 8px;
        display: flex;
        align-items: center;
        justify-content: center;
        transition: background 0.2s;
        width: 2.5rem;
        height: 2.5rem;
    }
    .share-button:hover {
        background: #4b5563;
    }
    .share-button i {
        font-size: 1.25rem;
    }
    .share-button.twitter { background: #1DA1F2; }
    .share-button.facebook { background: #3B5998; }
    .share-button.pinterest { background: #E60023; }
    .share-button.instagram { background: #C13584; }
    .share-button.twitter:hover { background: #1A91DA; }
    .share-button.facebook:hover { background: #344E86; }
    .share-button.pinterest:hover { background: #CB2027; }
    .share-button.instagram:hover { background: #B02E6F; }
    .share-button.copy-link {
        background: #6B7280;
    }
    .share-button.copy-link:hover {
        background: #4B5563;
    }
    .back-button {
        background: #374151;
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 8px;
        margin-bottom: 1rem;
        font-size: 0.875rem;
    }
    .back-button:hover {
        background: #4B5563;
    }
</style>

<div class="image-detail-container">
    <button id="back-button" class="back-button">Back</button>
    <img src="<%= item.contentUrl %>" alt="Image" class="image-detail-image mb-4">
    <a href="<%= item.contentUrl %>" download="pixzor_image_<%= item.id %>.jpg" class="btn btn-primary w-full mb-2">Download</a>
    <div class="share-buttons">
        <a href="https://twitter.com/intent/tweet?url=<%= encodeURIComponent(url) %>&text=Check%20out%20this%20AI-generated%20image%20on%20Pixzor!" class="share-button twitter" target="_blank">
            <i class="fab fa-twitter"></i>
        </a>
        <a href="https://www.facebook.com/sharer/sharer.php?u=<%= encodeURIComponent(url) %>" class="share-button facebook" target="_blank">
            <i class="fab fa-facebook-f"></i>
        </a>
        <a href="https://pinterest.com/pin/create/button/?url=<%= encodeURIComponent(url) %>&media=<%= encodeURIComponent(item.contentUrl) %>&description=Check%20out%20this%20AI-generated%20image%20on%20Pixzor!" class="share-button pinterest" target="_blank">
            <i class="fab fa-pinterest-p"></i>
        </a>
        <a href="https://www.instagram.com/" class="share-button instagram" target="_blank">
            <i class="fab fa-instagram"></i>
        </a>
        <button class="share-button copy-link" onclick="navigator.clipboard.writeText('<%= url %>').then(() => alert('Link copied!'))">
            <i class="fas fa-link"></i>
        </button>
    </div>
    <h2 class="text-xl font-bold mb-2">Prompt:</h2>
    <p class="bg-gray-700 p-2 rounded mb-4"><%= item.prompt || 'No prompt available.' %></p>
    <h2 class="text-xl font-bold mb-2">Created by:</h2>
    <p class="mb-4"><%= item.user?.username || 'Unknown' %></p>
    <% if (item.model) { %>
    <h2 class="text-xl font-bold mb-2">Model:</h2>
    <p class="mb-4"><%= item.model %></p>
    <% } %>
    <h2 class="text-xl font-bold mb-2">Comments:</h2>
    <ul class="comments-list mb-4">
        <% if (item.comments && item.comments.length > 0) { %>
            <% item.comments.forEach(comment => { %>
                <li class="comment-item pb-2 mb-2">
                    <div class="flex items-center mb-1">
                        <img src="<%= comment.user.photo || '/images/default-avatar.png' %>" alt="<%= comment.user.username %>" class="w-6 h-6 rounded-full mr-2">
                        <span class="font-semibold text-sm mr-2"><%= comment.user.username %></span>
                        <span class="text-gray-400 text-xs"><%= new Date(comment.createdAt).toLocaleString() %></span>
                    </div>
                    <p class="text-gray-300 text-sm break-words"><%= comment.commentText %></p>
                </li>
            <% }); %>
        <% } else { %>
            <li class="text-gray-400 italic">No comments yet.</li>
        <% } %>
    </ul>
    <% if (isLoggedIn) { %>
    <form action="/api/content/<%= contentId %>/comments" method="POST" class="flex space-x-2">
        <input type="hidden" name="_csrf" value="<%= csrfToken %>">
        <input type="text" name="commentText" placeholder="Write a comment..." class="flex-1 bg-gray-700 rounded px-4 py-2 text-gray-200" required>
        <button type="submit" class="bg-green-600 text-white px-4 py-2 rounded">Post</button>
    </form>
    <% } else { %>
    <p class="text-gray-400">Login to comment.</p>
    <% } %>
</div>

===== views\index.ejs =====
<!-- views/index.ejs -->
<div 
    id="advert-container" 
    class="bg-cover bg-center mx-auto flex flex-col justify-start items-center text-center pt-8"
    style="max-width: 785px; height: 520px;"
>
    <h1 class="text-4xl font-bold text-white">Pixzor</h1>
    <p class="text-lg text-gray-300">Create consistent characters, stylize images or make movies.</p>
</div>

<!-- Content area for dynamic partials -->
<div id="content-area" class="container mx-auto p-4">
    <%- include('partials/home_content') %>
</div>

<script>
    // Make backend data available to frontend scripts
    // Use <%- %> for unescaped JSON output
    window.RUNWARE_MODELS = <%- JSON.stringify(runwareModels || {}) %>;
    window.PROMPT_BASED_STYLES = <%- JSON.stringify(promptBasedStyles || []) %>;
</script>

===== views\upscale-image.ejs =====
<h1><%= title %></h1>
<p>Prompt from chat: <%= prompt %></p>
<!-- Add upscale-specific form or logic here -->

===== views\layouts\layout.ejs =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <meta name="description" content="<%= locals.description || 'Create AI movies, images, and chat with Pixzor' %>">
    <meta property="og:title" content="<%= title %>">
    
    <meta property="og:image" content="<%= typeof imageUrl !== 'undefined' ? imageUrl : 'https://www.pixzor.com/images/default.jpg' %>">
    
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <meta name="referrer" content="no-referrer-when-downgrade">
    <meta name="keywords" content="AI movies, image generation, chatbot, <%= locals.title || 'Pixzor' %>">   
    <link rel="preload" href="/js/chat-tab.js" as="script">
    <link rel="preload" href="/js/create-tab.js" as="script">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css">    
    <meta name="csrf-token" content="<%= csrfToken %>">
    <script>
        window.isLoggedIn = <%= isLoggedIn ? 'true' : 'false' %>;
        window.currentUser = <%= user ? JSON.stringify(user) : 'null' %>;
        window.RUNWARE_MODELS = <%- JSON.stringify(runwareModels || {}) %>;
        window.PROMPT_BASED_STYLES = <%- JSON.stringify(promptBasedStyles || []) %>;
        window.ORIGINAL_STYLES = <%- JSON.stringify(promptBasedStyles || []) %>;
    </script>
    <script src="https://kit.fontawesome.com/your-kit.js"></script>
    <script src="https://js.stripe.com/v3/"></script>
    <!-- Include imagesLoaded and Masonry via CDN -->
    <script src="https://unpkg.com/imagesloaded@5/imagesloaded.pkgd.min.js"></script>
    <script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.min.js"></script>
    <!-- Add marked.js for Markdown parsing -->    
    <script src="/js/marked.min.js"></script>
    
<style>
    /* Base Body Styles */
    body {
        margin: 0;
        padding: 0;
        background: #111827;
        color: #ffffff;
        box-sizing: border-box;
    }

    /* Topbar Styles */
    .topbar { 
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        background: #374151;
        padding: 10px 20px;
        z-index: 50;
        box-sizing: border-box;
    }

    /* Sidebar Styles (Base - Desktop) */
    #main-sidebar {
        position: fixed;
        top: 0;
        left: 0;
        height: 100vh;
        width: 60px;
        background: #1f2937;
        padding-top: 10px; /* Reduced from 60px to align icons near top */
        z-index: 100;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 10px;
        box-sizing: border-box;
        overflow: hidden;
    }

    /* Sidebar Item Styles */
    .sidebar-item { 
        color: #d1d5db;
        padding: 15px;
        cursor: pointer;
    }
    .sidebar-item:hover, .sidebar-item.active { 
        color: #15803d; 
    }

    /* Main Content */
    main {
        box-sizing: border-box;
        display: flex;
        flex-direction: column;
        min-height: 100vh;
    }

    /* Content Area */
    .content-area { 
        margin-top: 60px;
        margin-bottom: 150px;
        background: #1f2937;
        padding: 15px;
        border-radius: 8px;
        overflow-y: auto;
        display: flex;
        flex-direction: column;
        gap: 10px;
        box-sizing: border-box;
        width: 100%;
    }

    /* Chat Box (Base Styles) */
    .chat-box { 
        position: fixed;
        bottom: 20px;
        left: 0.5rem;
        right: 0.5rem;
        width: auto;
        background: #1f2937;
        padding: 15px;
        border-radius: 16px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        z-index: 110;
        border: none;
        box-sizing: border-box;
    }

    /* Mobile Styles (Below 600px) */
    @media (max-width: 600px) {
        body {
            padding-bottom: 48px;
        }

        #main-sidebar {
            top: auto;
            bottom: 0;
            left: 0;
            right: 0;
            height: 40px;
            width: 100%;
            flex-direction: row;
            justify-content: space-around;
            align-items: center;
            padding: 0 4px;
            box-shadow: 0 -2px 10px rgba(0, 0, 0, 0.3);
            transform: none !important;
            z-index: 100;
        }

        .sidebar-item {
            padding: 2px;
            font-size: 11px;
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 2px;
            margin: 0;
            color: #d1d5db;
        }

        .sidebar-item i,
        .sidebar-item svg {
            font-size: 16px;
            width: 18px;
            height: 18px;
        }

        .content-area {
            margin-top: 60px;
            margin-bottom: 100px;
            padding-bottom: 60px;
            width: 100%;
        }

        .chat-box {
            bottom: 48px;
            left: 0.5rem;
            right: 0.5rem;
            padding: 8px;
            z-index: 110;
        }

        .topbar {
            left: 0;
            right: 0;
            width: 100%;
            padding: 10px;
        }

        main {
            margin-left: 0;
            padding-bottom: 100px;
            padding-left: 0.5rem;
            padding-right: 0.5rem;
        }

        .thumbnail, .image-loading { 
            max-width: 80px; 
            height: auto; 
        }
        .tab-label.full-label { 
            display: none; 
        }
        .tab-label.short-label { 
            display: inline; 
        }
        #advert-container {
            background-image: url('/images/mobile-advert.png');
        }
    }

    /* Desktop and Tablet Styles (Above 600px) */
    @media (min-width: 601px) {
        body {
            padding-left: 60px;
        }

        #main-sidebar {
            width: 60px;
            z-index: 100;
        }

        .topbar {
            left: 60px;
            right: 0;
            width: calc(100% - 60px);
        }

        main {
            margin-left: 60px;
            padding-left: 15px;
            padding-right: 15px;
            width: calc(100% - 60px);
        }

        .content-area {
            margin-left: 0;
            width: 100%;
        }

        .chat-box {
            left: calc(60px + 1rem);
            right: 1rem;
            bottom: 20px;
            width: auto;
        }
    }

    /* Content Item */
    .content-item { 
        margin-bottom: 10px; 
    }

    .thumbnail { 
        max-width: 150px; 
        height: auto; 
        border-radius: 4px; 
        cursor: pointer; 
    }

    /* Chat Messages */
    .chat-message { 
        padding: 10px; 
        border-radius: 4px; 
        margin-bottom: 10px; 
        max-width: 70%; 
    }
    .chat-message.user { 
        background: #4b5563; 
        margin-left: auto; 
        align-self: flex-end; 
    }
    .chat-message.bot-message { 
        background: #374151; 
        margin-right: auto; 
    }
    .chat-message.bot-message p {
        margin-bottom: 1rem;
    }
    .chat-message.bot-message ol { 
        margin: 0; 
        padding-left: 20px; 
        color: #d1d5db; 
    }
    .chat-message.bot-message li { 
        margin-bottom: 5px; 
    }

    /* Chat Tabs */
    .chat-tabs { 
        display: flex; 
        gap: 6px; 
        margin-bottom: 10px; 
        border: none; 
    }
    .chat-tab { 
        flex: 1; 
        padding: 4px; 
        text-align: center; 
        cursor: pointer; 
        background: #374151; 
        color: #d1d5db;
        transition: background 0.2s;
        border-radius: 12px;
        border: none;
    }
    .chat-tab:hover { 
        background: #4b5563; 
    }
    .chat-tab.active { 
        background: #15803d; 
        color: white; 
    }
    .tab-label { 
        display: inline; 
    }
    .tab-label.short-label { 
        display: none; 
    }
    .chat-content { 
        display: none; 
    }
    .chat-content.active { 
        display: block; 
    }

    /* Sub Tabs */
    .sub-tabs { 
        display: flex; 
        border-bottom: 1px solid #4b5563; 
        margin-bottom: 10px; 
    }
    .sub-tab { 
        flex: 1; 
        padding: 4px; 
        text-align: center; 
        cursor: pointer; 
        background: #374151; 
        color: #d1d5db;
        border-radius: 8px;
        margin: 0 2px;
        transition: background 0.2s;
    }
    .sub-tab:hover { 
        background: #4b5563; 
    }
    .sub-tab.active { 
        background: #22c55e; 
        color: white; 
    }
    .sub-content { 
        display: none; 
    }
    .sub-content.active { 
        display: flex; 
        align-items: center; 
        gap: 10px; 
    }
    .sub-content input, 
    .sub-content textarea { 
        flex: 1; 
        border-radius: 12px; 
        background: #4b5563; 
        color: #d1d5db;
        padding: 8px;
        border: none;
    }

    /* Chat Textarea */
    #chat-talk-input {
        resize: none;
        max-height: 150px;
        overflow-y: auto;
        min-height: 40px;
    }
    #chat-submit { 
        background: #15803d; 
        color: white; 
        padding: 5px 15px; 
        border-radius: 12px; 
        transition: background 0.2s; 
    }
    #chat-submit:hover { 
        background: #16a34a; 
    }

    /* Modals */
    .modal { 
        position: fixed; 
        top: 0; 
        left: 0; 
        width: 100%; 
        height: 100%; 
        z-index: 120;
        display: none; 
        justify-content: center; 
        align-items: center; 
    }
    .modal:not(.hidden) { 
        display: flex; 
    }
    .modal-backdrop { 
        position: absolute; 
        top: 0; 
        left: 0; 
        width: 100%; 
        height: 100%; 
        background: rgba(0, 0, 0, 0.5); 
    }
    .modal-content { 
        position: relative; 
        z-index: 121; 
        background: #fff; 
        padding: 20px; 
        border-radius: 8px; 
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.5); 
    }
    #welcome-modal .modal-content {
        background-color: #1f2937 !important;
        color: #ffffff !important;
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
    }

    /* Typing Indicator */
    .typing { 
        color: #888; 
        font-style: italic; 
    }

    /* Image Loading Placeholder */
    .image-loading { 
        background: #4b5563; 
        width: 150px; 
        height: 150px; 
        border-radius: 4px; 
        display: flex; 
        align-items: center; 
        justify-content: center; 
        color: #d1d5db; 
        font-style: italic; 
    }

    /* Image Modal */
    .image-modal img { 
        max-width: 90vw; 
        max-height: 90vh; 
    }

    /* Gallery CSS */
    #image-list {
        width: 100%;
        margin: 0 auto;
        position: relative;
    }
    .grid-sizer,
    .image-card,
    .file-card { /* Add .file-card here */
        width: calc(33.333% - 10px); /* Apply consistent width */
        margin-bottom: 10px;
    }
    .image-card, /* Keep specific .image-card styles if any, or merge if identical */
    .file-card { /* Keep specific .file-card styles if any, or merge if identical */
        float: left;
        margin-right: 10px;
    }
    .image-card img {
        display: block;
        width: 100%;
        height: auto;
        border-radius: 0.5rem;
        transition: transform 0.2s ease-in-out;
    }
    .image-card:hover img {
        transform: scale(1.02);
    }
    .like-button {
        position: absolute;
        top: 10px;
        right: 10px;
        background: rgba(0, 0, 0, 0.5);
        border: none;
        border-radius: 50%;
        width: 36px;
        height: 36px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: background-color 0.2s;
    }
    .like-button:hover {
        background: rgba(0, 0, 0, 0.7);
    }
    .like-button i {
        color: white;
        font-size: 1.2rem;
    }
    .like-button i.liked {
        color: #ef4444;
    }

    /* Comments Modal */
    #comments-modal {
        background-color: rgba(0, 0, 0, 0.75);
    }
    #comments-modal .bg-white {
        max-height: 90vh;
        overflow-y: auto;
    }
    #modal-image {
        max-height: 70vh;
        object-fit: contain;
    }
    #modal-prompt-container {
        max-height: 100px;
        overflow-y: auto;
    }
    #comments-list {
        max-height: 300px;
        overflow-y: auto;
    }

    /* Responsive Gallery */
    @media (max-width: 1024px) {
        .grid-sizer,
        .image-card {
            width: calc(50% - 10px);
        }
    }
    @media (max-width: 640px) {
        .grid-sizer,
        .image-card {
            width: calc(100% - 10px);
        }
    }
    @media (max-width: 768px) {
        #comments-modal .bg-white {
            flex-direction: column;
        }
        #comments-modal .md\:w-2\/3,
        #comments-modal .md\:w-1\/3 {
            width: 100%;
        }
    }

    /* Fullscreen Modal */
    #fullscreen-modal {
        background-color: rgba(0, 0, 0, 0.9);
    }
    #fullscreen-image {
        max-width: 90vw;
        max-height: 90vh;
        object-fit: contain;
    }

    /* Chat History Hover */
    .content-item.chat-message[data-chat-id]:hover {
        cursor: pointer;
        background-color: #4a5568;
    }

    /* Toast Styles */
    #toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 1000;
        width: 300px;
    }
    .toast-info {
        background-color: #3b82f6;
    }
    .toast-success {
        background-color: #22c55e;
    }
    .toast-error {
        background-color: #ef4444;
    }
    .toast-warning {
        background-color: #f59e0b;
    }
    #toast-container > div {
        padding: 1rem;
        margin-bottom: 1rem;
        border-radius: 0.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
        max-width: 100%;
    }
    #toast-container > div button {
        margin-left: 1rem;
        color: white;
        background: none;
        border: none;
        font-size: 1.2em;
        line-height: 1;
        cursor: pointer;
        opacity: 0.7;
        transition: opacity 0.2s;
    }
    #toast-container > div button:hover {
        opacity: 1;
    }

    /* Advert Container */
    #advert-container {
        background-image: url('/images/advert.png');
    }

    /* Chat Messages Area */
    #chat-messages {
        padding-bottom: 150px;
    }

    /* Tab Content */
    .tab-content {
        display: none;
    }

    /* Markdown Spacing */
    .message-content p:not(:last-child) {
        margin-bottom: 0.75rem;
    }
</style>
</head>
<body class="bg-gray-900 text-white">
    <!-- Toast Container should be outside main content, maybe near body end -->
    <div id="toast-container" class="fixed top-5 right-5 z-50 space-y-2"></div>
    
    <!-- Top Bar -->
    <header class="topbar flex items-center">
      
        
        <div class="flex items-center space-x-4 ml-auto">
            <button id="tokens-button" class="flex items-center bg-gray-600 hover:bg-yellow-600 px-4 py-2 rounded-lg text-base mr-4">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-yellow-400 mr-2" viewBox="0 0 20 20" fill="currentColor">
                    <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
                    <path fill-rule="evenodd" d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM10 18a8 8 0 100-16 8 8 0 000 16z" clip-rule="evenodd" />
                </svg>
                <span id="token-count" class="text-yellow-400">100 Tokens</span>
            </button>
            <button id="google-auth-button" class="flex items-center bg-gray-600 hover:bg-green-600 px-4 py-2 rounded-lg text-base">
                <div class="w-5 h-5 mr-2 rounded-full bg-gray-500 flex items-center justify-center">
                    <i class="fas fa-user text-white text-sm"></i>
                </div>
                <span id="auth-text">Login</span>
            </button>
        </div>
    </header>

    <!-- Sidebar -->
    <div id="main-sidebar" class="sidebar">
    <div class="sidebar-item active" data-section="home" title="Home">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6" />
        </svg>
    </div>
    <div class="sidebar-item" data-section="files" title="Files">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-6l-2-2H5a2 2 0 00-2 2z" />
        </svg>
    </div>
    <div class="sidebar-item" data-section="chat-history" title="Chat History">
        <i class="fas fa-list h-6 w-6"></i>
    </div>
    <div class="sidebar-item" data-section="gallery" title="Gallery">
        <i class="fas fa-images h-6 w-6"></i>
    </div>
</div>

    <!-- Main Content -->
    <main class="p-4 flex flex-col flex-1 overflow-hidden">
        <div id="content-area" class="content-area flex-1 overflow-y-auto">
            <div id="chat-messages" class="flex-1 overflow-y-auto pb-32">
                <%- body %>
            </div>
            <!-- Removed Storyboard -->
        </div>
        <% if (locals.includeChat) { %>
            <div class="chat-box" id="chat-box">
                <div class="chat-tabs flex gap-2 mb-2">
                    <div class="chat-tab flex-1 p-2 text-center cursor-pointer bg-gray-700 hover:bg-gray-600 transition-colors active" data-tab="chat">
                        <svg class="w-5 h-5 inline-block mr-1" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm-7 12h-2v-2h2v2zm0-4h-2V6h2v4z"/>
                        </svg>
                        <span class="tab-label full-label">Chat</span>
                    </div>
                    <div class="chat-tab flex-1 p-2 text-center cursor-pointer bg-gray-700 hover:bg-gray-600 transition-colors" data-tab="create-images">
                        <svg class="w-5 h-5 inline-block mr-1" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7l3.5-4.5 2.5 3.5 4-4.5 3 4.5H14z"/>
                        </svg>
                        <span class="tab-label full-label">Create Images</span>
                        <span class="tab-label short-label">Images</span>
                    </div>
                    <div class="chat-tab flex-1 p-2 text-center cursor-pointer bg-gray-700 hover:bg-gray-600 transition-colors" data-tab="create-videos">
                        <svg class="w-5 h-5 inline-block mr-1" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M18 4l2 4h-3l-2-4h-2l2 4h-3l-2-4H8l2 4H7L5 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V4h-4z"/>
                        </svg>
                        <span class="tab-label full-label">Create Videos</span>
                        <span class="tab-label short-label">Videos</span>
                    </div>
                </div>
                <div id="chat-tab-content" class="flex-1 overflow-y-auto">
                    <%- include('../partials/chat-tab') %>
                </div>
            </div>
        <% } %>
    </main>

    <!-- views/layouts/layout.ejs -->
    <!-- Toast and Modals -->
    <div id="modals-container">
        <!-- Image Modal -->
        <div id="image-modal" class="modal hidden"> <!-- Added 'hidden' class -->
            <div class="modal-backdrop"></div>
            <div class="modal-content">
                <img id="enlarged-image" src="" alt="Enlarged Image">
                <button id="close-image-modal" class="absolute top-2 right-2 text-white bg-gray-600 hover:bg-gray-500 px-2 py-1 rounded">✕</button>
            </div>
        </div>
        <!-- Comments Modal -->
        <div id="comments-modal" class="fixed inset-0 bg-black bg-opacity-75 hidden z-40">
            <div class="bg-white rounded-lg shadow-lg flex flex-col md:flex-row relative w-11/12 md:w-4/5 max-h-screen overflow-y-auto">
                <!-- Close Button -->
                <button id="close-comments-modal" class="absolute top-2 right-2 bg-gray-400 text-white hover:bg-green-300 rounded-full p-1 text-2xl z-30" aria-label="Close Comments Modal">
                    ×
                </button>

                <!-- Left Section: Image -->
                <div class="md:w-2/3 bg-gray-100 flex flex-col items-start p-4 relative">
                    <button id="fullscreen-icon" class="absolute top-2 left-2 bg-black text-white p-1 rounded-full text-sm z-20" aria-label="Fullscreen Image">
                        <i class="fas fa-expand"></i>
                    </button>
                    <img id="modal-image" src="" alt="Full Image" class="w-full h-auto rounded-lg object-contain">
                    <div class="w-full mt-4 space-y-2">
                        <div id="model-container" class="flex flex-col hidden">
                            <h3 class="text-sm font-semibold text-gray-700">Model</h3>
                            <p id="modal-model" class="text-xs text-gray-500"></p>
                        </div>
                    </div>
                </div>

                <!-- Right Section: Details and Comments -->
                <div class="md:w-1/3 p-6 flex flex-col space-y-4">
                    <!-- Prompt -->
                    <div class="flex flex-col">
                        <h3 class="text-lg font-bold text-black mb-2 flex items-center">
                            Prompt
                            <button id="copy-prompt" class="ml-2 text-gray-500 hover:text-gray-700" title="Copy Prompt" aria-label="Copy Prompt">
                                <i class="fas fa-copy"></i>
                            </button>
                        </h3>
                        <div id="modal-prompt-container" class="border p-3 rounded max-h-24 overflow-y-auto bg-gray-50 relative">
                            <p id="modal-prompt" class="text-gray-600 pr-8"></p>
                        </div>
                    </div>

                    <!-- User Profile -->
                    <div>
                        <h3 class="text-lg font-bold text-black">Created By <span id="modal-username" class="text-blue-500"></span></h3>
                    </div>

                    <!-- Action Buttons -->
                    <div class="flex flex-wrap gap-2">
                        <div class="relative group">
                            <a id="download-button" href="#" class="bg-green-600 text-white p-2 rounded flex items-center" download>
                                <i class="fas fa-download"></i>
                            </a>
                            <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">Download</span>
                        </div>
                        <div id="delete-button-container" class="relative group hidden">
                            <button id="delete-button-modal" class="bg-red-600 text-white p-2 rounded flex items-center" aria-label="Delete Content">
                                <i class="fas fa-trash"></i>
                            </button>
                            <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">Delete</span>
                        </div>
                        <div class="relative group">
                            <a id="share-facebook" href="#" target="_blank" class="bg-blue-600 text-white p-2 rounded flex items-center" aria-label="Share on Facebook">
                                <i class="fab fa-facebook-f"></i>
                            </a>
                            <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">Facebook</span>
                        </div>
                        <div class="relative group">
                            <a id="share-twitter" href="#" target="_blank" class="bg-blue-400 text-white p-2 rounded flex items-center" aria-label="Share on Twitter">
                                <i class="fab fa-twitter"></i>
                            </a>
                            <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">Twitter</span>
                        </div>
                        <div class="relative group">
                            <a id="share-pinterest" href="#" target="_blank" class="bg-red-600 text-white p-2 rounded flex items-center" aria-label="Share on Pinterest">
                                <i class="fab fa-pinterest-p"></i>
                            </a>
                            <span class="absolute bottom-full left-1/2 transform -translate-x-1/2 bg-gray-800 text-white text-xs rounded px-2 py-1 opacity-0 group-hover:opacity-100 transition-opacity">Pinterest</span>
                        </div>
                    </div>

                    <!-- Comments Section -->
                    <div class="flex flex-col flex-grow overflow-hidden">
                        <h3 class="text-lg font-bold text-black mb-2">Comments</h3>
                        <div class="flex-grow overflow-y-auto mb-4">
                            <ul id="comments-list" class="space-y-2"></ul>
                        </div>
                        <div class="mt-auto">
                            <textarea id="comment-input" placeholder="Login to comment" class="w-full p-2 border rounded text-black mb-2" aria-label="Write a comment" disabled></textarea>
                            <button id="post-comment" class="w-full bg-green-600 text-white px-4 py-2 rounded" aria-label="Post Comment" disabled>Post Comment</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Fullscreen Modal -->
        <div id="fullscreen-modal" class="hidden fixed inset-0 bg-black bg-opacity-90 flex justify-center items-center z-50">
            <div class="relative w-full h-full flex justify-center items-center">
                <img id="fullscreen-image" src="" alt="Full Image" class="max-w-full max-h-full object-contain">
                <button id="close-fullscreen-modal" class="absolute top-4 right-4 bg-red-500 hover:bg-red-600 text-white text-2xl px-3 py-1 rounded-full shadow-lg">
                    ×
                </button>
            </div>
        </div>

        <!-- Include other modals from partial -->
        <%- include('../partials/modals') %>

    </div>

    <!-- Add a test link for welcome modal -->
    <div id="test-welcome-modal" style="position: fixed; bottom: 10px; right: 10px; z-index: 1000;">

    </div>
    
    <script src="/js/gallery.js" defer></script>
    <script src="/js/core.js"></script>
    <% if (locals.includeChat) { %>
        <script src="/js/chat-tab.js"></script>
    <% } %>
    <script src="/js/create-tab.js" defer></script>
    <!-- Load Gallery Script -->
    
</body>
</html>

===== views\partials\chat-tab.ejs =====
<!-- views/partials/chat-tab.ejs -->
<div>
    
    <div class="sub-content active" id="chat-talk">
        <textarea id="chat-talk-input" class="w-full p-2 rounded bg-gray-800 border border-gray-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Describe what you want to create..."></textarea>
        <button id="chat-submit" data-mode="chat-talk" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition-colors ml-2">Send</button>
    </div>
    
    <!-- Modified: Create Images Content Area -->
    <div class="sub-content flex flex-col p-1 h-full overflow-y-auto bg-gray-800 text-gray-300 text-sm" id="create-images-content">
        <!-- Row 1: Thumbnail and Prompt -->
        <div class="flex w-full gap-1 items-start">
            <!-- Img2Img Thumbnail Upload (Pixzor Styled) -->
            <div id="thumbnail-container" class="flex-shrink-0 relative w-12 h-12 sm:w-16 sm:h-16 overflow-hidden rounded">
                <label for="image-upload-input" class="cursor-pointer block w-full h-full">
                    <!-- Placeholder Icon (shown by default) -->
                    <div id="thumbnail-placeholder-icon" class="w-full h-full bg-gray-700 flex items-center justify-center text-gray-400 text-2xl rounded border border-gray-600">
                        <i class="fas fa-image"></i>
                    </div>
                    <!-- Image Preview (hidden by default) -->
                    <img id="image-thumbnail-preview" src="#" alt="Upload preview" class="w-full h-full object-cover rounded hidden">
                </label>
                <input type="file" id="image-upload-input" name="image" accept="image/png, image/jpeg" class="hidden">
                <button id="clear-image-upload" class="absolute top-0 right-0 -mt-1 -mr-1 bg-red-600 hover:bg-red-700 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs z-20 hidden" title="Clear Image">
                    <i class="fas fa-times"></i>
                </button>
            </div>

            <!-- Prompt Input Container -->
            <div class="flex-grow">
                <textarea id="image-prompt-input" name="prompt" class="w-full p-2 rounded bg-gray-700 border border-gray-600 text-white placeholder-gray-400 focus:outline-none focus:ring-1 focus:ring-green-500 resize-none text-sm" placeholder="Describe the image you want to create..." rows="2" style="height: 3.5rem; max-height: 13.5rem;"></textarea>
            </div>
        </div>

        <!-- Row 2: Controls Row (Moved Here) -->
        <!-- Controls Row (Pixzor Styled) -->
        <div class="flex flex-wrap items-center gap-1 text-xs">
            <!-- Aspect Ratio Dropdown (Pixzor Styled + Fix Applied) -->
            <div class="relative inline-block text-left">
                <button id="aspect-ratio-dropdown" type="button" class="inline-flex items-center justify-center rounded border border-gray-600 shadow-sm px-2 py-1 bg-gray-700 text-xs font-medium text-gray-300 hover:bg-gray-600 focus:outline-none focus:ring-1 focus:ring-offset-0 focus:ring-offset-gray-800 focus:ring-green-500" data-value="1:1">
                    <span id="selected-ratio-icon"><i class="fas fa-square"></i></span>
                    <span id="selected-ratio-text" class="ml-1">1:1</span> <!-- Span for dynamic text -->
                    <svg class="-mr-1 ml-1 h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </button>
                <div id="aspect-ratio-options" class="dropdown-options origin-bottom-left absolute bottom-full left-0 mb-1 w-max-content rounded-md shadow-lg bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none hidden z-50" role="menu" aria-orientation="vertical" aria-labelledby="aspect-ratio-dropdown">
                    <div class="py-1" role="none">
                        <a href="#" class="aspect-ratio-option text-gray-300 hover:text-white block px-3 py-1 text-xs hover:bg-gray-600" role="menuitem" data-value="1:1" title="Square (1:1)"><i class="fas fa-square w-4 inline-block mr-1"></i> 1:1</a>
                        <a href="#" class="aspect-ratio-option text-gray-300 hover:text-white block px-3 py-1 text-xs hover:bg-gray-600" role="menuitem" data-value="16:9" title="Wide (16:9)"><i class="fas fa-desktop w-4 inline-block mr-1"></i> 16:9</a>
                        <a href="#" class="aspect-ratio-option text-gray-300 hover:text-white block px-3 py-1 text-xs hover:bg-gray-600" role="menuitem" data-value="9:16" title="Tall (9:16)"><i class="fas fa-mobile-alt w-4 inline-block mr-1"></i> 9:16</a>
                    </div>
                </div>
            </div>

            <!-- Style Select Container (Populated by JS) -->
            <div id="style-select-container" class="relative inline-block text-left">
                <select id="style-select" name="style" class="rounded border border-gray-600 shadow-sm px-2 py-1 bg-gray-700 text-xs font-medium text-gray-300 hover:bg-gray-600 focus:outline-none focus:ring-1 focus:ring-offset-0 focus:ring-offset-gray-800 focus:ring-green-500" title="Select Style">
                    <option value="" selected>Style: None</option>
                    <!-- Styles will be populated dynamically -->
                </select>
                <input type="hidden" id="style-label-input" name="styleLabel" value=""> <!-- Hidden input for style label -->
                <input type="hidden" id="negative-prompt-input" name="negativePromptOverride" value=""> <!-- Hidden input for style-specific negative prompt -->
            </div>
<div class="block sm:hidden w-full basis-full h-0"></div> <!-- Force line break for mobile, hide on sm+ -->

            <!-- Model Select (Pixzor Styled & Naming) -->
            <div class="relative inline-block text-left">
                <%# ** CORRECTED MODEL LIST BELOW ** %>
                <select id="image-model-select" name="model" class="appearance-none bg-gray-700 border border-gray-600 text-gray-300 py-1 pl-2 pr-7 rounded text-xs focus:outline-none focus:ring-1 focus:ring-green-500 focus:border-green-500" title="Select Model">
                    <%# Format: Model Name %>
                    <%# Value is Runware ID, data-cost is *actual* Runware cost %>
                    <option value="runware:100@1" data-cost="0.0065" selected>Model: Flux Schnell</option> <%# Scaled cost: 0.0013*5=0.0065, rounded to 0.01 %>
                    <option value="runware:101@1" data-cost="0.016">Model: Flux Dev</option> <%# Scaled cost: 0.0032*5=0.016, rounded to 0.02 %>
                    <option value="rundiffusion:130@100" data-cost="0.016">Model: Juggernaut Pro</option> <%# Scaled cost: 0.0032*5=0.016, rounded to 0.02 %>
                    <option value="civitai:133005@782002" data-cost="0.0065">Face / Character</option> <%# Scaled cost: 0.0013*5=0.0065, rounded to 0.01 %>
                </select>
                <div class="pointer-events-none absolute inset-y-0 right-0 flex items-center px-1 text-gray-400">
                    <svg class="fill-current h-3 w-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                        <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </div>
            </div>

            <!-- Enhance Button (Placeholder - Pixzor Styled) -->
            <button id="enhance-prompt-button" class="bg-gray-700 hover:bg-gray-600 text-gray-300 px-2 py-1 rounded border border-gray-600 text-xs" title="Enhance Prompt (Future Feature)">
                <i class="fas fa-magic"></i>
            </button>

            <!-- Strength Slider Container (Pixzor Styled) -->
            <div id="image-strength-control" class="items-center gap-1 hidden ml-2">
                <label for="image-strength-slider" class="block text-xs font-medium text-gray-400">Strength:</label>
                <input type="range" id="image-strength-slider" name="strength" min="0" max="1" step="0.01" value="0.75" class="w-20 h-1 bg-gray-600 rounded-lg appearance-none cursor-pointer range-sm align-middle accent-green-500">
                <span id="image-strength-value-display" class="text-xs text-gray-400 w-6 text-right">0.75</span>
            </div>

            <!-- Generate Button (Pixzor Styled) -->
            <button id="image-generate-button" type="button" class="bg-green-600 hover:bg-green-700 disabled:opacity-50 disabled:cursor-not-allowed text-white px-3 py-1 rounded transition-colors text-sm flex items-center gap-1" disabled>
                <span>Generate</span>
                <span id="image-token-cost-display">($0.01)</span>
            </button>
        </div>

        <!-- Feedback Area (Moved Here) -->
        <div id="image-gen-feedback" class="text-xs text-gray-400 min-h-[1.2em]"></div>
    </div>
   
</div>

<style>
/* Add styles for the active aspect ratio button */
.aspect-ratio-btn.active {
    background-color: #15803d; /* green-700 */
    box-shadow: 0 0 0 2px #22c55e; /* ring-green-500 */
}
/* Ensure Font Awesome 6 Pro icons display correctly if available */
.fa-rectangle-wide, .fa-rectangle-portrait { 
  font-family: 'Font Awesome 6 Pro'; 
}
/* Styles for the new dropdown */
.custom-dropdown {
    max-width: 100px; /* Adjust width as needed */
}
/* Styles for new elements */
.custom-select {
    background-color: #374151; /* bg-gray-700 */
    color: white;
    border: 1px solid #4b5563; /* border-gray-600 */
    border-radius: 0.375rem; /* rounded-md */
    padding: 0.25rem 1.75rem 0.25rem 0.5rem; /* py-1 pr-7 pl-2 */
    appearance: none;
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3E%3Cpath stroke='%239CA3AF' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='M6 8l4 4 4-4'/%3E%3C/svg%3E");
    background-position: right 0.5rem center;
    background-repeat: no-repeat;
    background-size: 1em;
    cursor: pointer;
}

.custom-button {
    background-color: #374151; /* bg-gray-700 */
    color: white;
    height: 28px; /* Match select height approx */
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border: 1px solid #4b5563; /* border-gray-600 */
    border-radius: 0.375rem; /* rounded-md */
    font-size: 0.75rem; /* text-xs */
    padding: 0 0.5rem; /* px-2 */
    transition: background-color 0.2s;
    cursor: pointer;
}

.custom-button:hover {
    background-color: #4b5563; /* hover:bg-gray-600 */
}

/* Ensure thumbnail container doesn't collapse */

/* Custom scrollbar styles */
.custom-scrollbar::-webkit-scrollbar {
    width: 10px;
    height: 10px;
}

.custom-scrollbar::-webkit-scrollbar-thumb {
    background-color: #4b5563; /* bg-gray-600 */
    border-radius: 10px;
    box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);
}

.custom-scrollbar::-webkit-scrollbar-track {
    background-color: #f7fafc; /* gray-100 */
}
</style>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const imageUploadInput = document.getElementById('image-upload-input');
    const thumbnail = document.getElementById('image-thumbnail-preview');
    const clearButton = document.getElementById('clear-image-upload');
    const thumbnailContainer = document.getElementById('thumbnail-container'); 
    const placeholderIcon = document.getElementById('thumbnail-placeholder-icon'); 
    
    // NEW elements
    const modelSelect = document.getElementById('image-model-select');
    const styleSelect = document.getElementById('image-style-select'); 
    const enhanceButton = document.getElementById('enhance-prompt-button'); 
    const generateButton = document.getElementById('image-generate-button'); 
    const tokenCostDisplay = document.getElementById('image-token-cost-display'); 
    
    // Dropdown elements
    const dropdown = document.getElementById('aspect-ratio-dropdown');
    const optionsContainer = document.getElementById('aspect-ratio-options');
    const selectedIconSpan = document.getElementById('selected-ratio-icon');
    const selectedRatioTextSpan = document.getElementById('selected-ratio-text'); 

    // --- Helper Function --- 
    function updateGenerateButtonCost() {
        const selectedModelOption = modelSelect.options[modelSelect.selectedIndex];
        const cost = selectedModelOption.dataset.cost || '1';
        tokenCostDisplay.textContent = `(${cost})`;
    }

    // --- End Helper Functions ---

    // --- Initial Setup ---
    updateGenerateButtonCost();
    // --- End Initial Setup ---

    // --- Event Listeners ---

    // Model Change Listener
    if (modelSelect) {
        modelSelect.addEventListener('change', () => {
            updateGenerateButtonCost();
        });
    }

    // Image Upload Listener
    if (imageUploadInput && thumbnail && clearButton && placeholderIcon && generateButton) { 
        imageUploadInput.addEventListener('change', function(event) {
            const file = event.target.files[0];
            if (file && file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function(e) {
                    thumbnail.src = e.target.result;
                    thumbnail.classList.remove('hidden');
                    placeholderIcon.classList.add('hidden');
                }
                reader.readAsDataURL(file);
            } else {
                thumbnail.src = '/images/placeholder.png'; 
                imageUploadInput.value = ''; 
                thumbnail.classList.add('hidden');
                placeholderIcon.classList.remove('hidden');
            }
        });

        // Clear Button Listener
        clearButton.addEventListener('click', () => {
            thumbnail.src = '/images/placeholder.png'; 
            imageUploadInput.value = '';           
            thumbnail.classList.add('hidden');
            placeholderIcon.classList.remove('hidden');
        });
    }

    // Aspect Ratio Dropdown Logic
    if (dropdown && optionsContainer && selectedIconSpan && selectedRatioTextSpan) {
        // Toggle dropdown visibility
        dropdown.addEventListener('click', () => {
            if (dropdown.disabled) {
                console.log('[AspectRatio Click] Ignored (Button disabled)');
                return;
            }
            console.log('[AspectRatio Click] Fired. Options hidden before toggle:', optionsContainer.classList.contains('hidden'));
            optionsContainer.classList.toggle('hidden');
        });

        // Handle option selection
        optionsContainer.addEventListener('click', (event) => {
            const optionLink = event.target.closest('.aspect-ratio-option');
            if (optionLink) {
                event.preventDefault(); 
                const newValue = optionLink.dataset.value;
                const newIconHTML = optionLink.querySelector('i').outerHTML; 
                const newText = optionLink.textContent.trim(); 

                // Update the main dropdown button
                dropdown.dataset.value = newValue; 
                selectedIconSpan.innerHTML = newIconHTML;
                selectedRatioTextSpan.textContent = newText; 
                
                // Hide the selected option, show others in the list
                const allOptions = optionsContainer.querySelectorAll('.aspect-ratio-option');
                allOptions.forEach(opt => {
                    if (opt.dataset.value === newValue) {
                        opt.classList.add('hidden');
                    } else {
                        opt.classList.remove('hidden');
                    }
                });
+
                // Hide the options container
                optionsContainer.classList.add('hidden');

                // Log selection (for create-tab.js reference)
                console.log('Selected Ratio (Dropdown):', newValue);
            }
        });

        // Optional: Close dropdown when clicking outside
        document.addEventListener('click', (event) => {
            if (!dropdown.contains(event.target) && !optionsContainer.contains(event.target)) {
                optionsContainer.classList.add('hidden');
            }
        });
    }

    // Enhance Button Listener (Example)
    if (enhanceButton) {
        enhanceButton.addEventListener('click', () => {
            // Placeholder for enhance functionality - maybe call an API?
            console.log('Enhance button clicked!');
            window.showToast('Enhance functionality not yet implemented.', 'info');
        });
    }

    // NEW: Strength Slider Update
    const strengthSlider = document.getElementById('image-strength-slider');
    const strengthValueDisplay = document.getElementById('image-strength-value-display');
    if(strengthSlider && strengthValueDisplay) {
        strengthSlider.addEventListener('input', () => {
            strengthValueDisplay.textContent = strengthSlider.value;
        });
    }

    // Function to update Generate button state and Strength visibility
    function updateControlsBasedOnState() {
        const modelValue = modelSelect.value;
        const isSchnellModel = modelValue === 'runware:100@1';
        const hasUploadedImage = uploadedImageData !== null;
        const hasPrompt = imageInput.value.trim().length > 0;

        // Show strength slider only if an image is uploaded AND model supports img2img
        if (hasUploadedImage && !isSchnellModel) {
            strengthControl.classList.remove('hidden');
        } else {
            strengthControl.classList.add('hidden');
        }

        // Generate button disabled logic:
        if (isSchnellModel) {
            // For Schnell (text-to-image): Disable if no prompt
            generateButton.disabled = !hasPrompt;
        } else {
            // For other models (image-to-image): Disable if no prompt OR no image
            generateButton.disabled = !hasPrompt || !hasUploadedImage;
        }
        console.log(`[UpdateControls] Model: ${modelValue}, IsSchnell: ${isSchnellModel}, HasImage: ${hasUploadedImage}, HasPrompt: ${hasPrompt}, Generate Disabled: ${generateButton.disabled}`);
    }

    imageUploadInput.addEventListener('change', async () => {
        // ... rest of the code remains the same ...
    });
});
</script>

===== views\partials\chat_history.ejs =====
<div class="p-4">
    <h2 class="text-2xl font-bold mb-4">Chat History</h2>
    <% if (selectedChat) { %>
        <h3 class="text-xl font-semibold"><%= selectedChat.title %></h3>
        <div class="chat-messages">
            <% selectedChat.messages.forEach(msg => { %>
                <div class="<%= msg.role === 'user' ? 'text-right' : 'text-left' %> mb-2">
                    <span class="inline-block bg-<%= msg.role === 'user' ? 'blue' : 'gray' %>-200 p-2 rounded">
                        <%= msg.content %>
                    </span>
                </div>
            <% }) %>
        </div>
    <% } else { %>
        <ul class="space-y-2">
            <% chats.forEach(chat => { %>
                <li>
                    <a href="/chat-history/<%= chat.id %>" class="block p-2 hover:bg-gray-100">
                        <%= chat.title %> <span class="text-gray-500">(<%= chat.timestamp.toLocaleDateString() %>)</span>
                    </a>
                </li>
            <% }) %>
        </ul>
        <% if (chats.length === 0) { %>
            <p class="text-gray-500">No chat history available.</p>
        <% } %>
    <% } %>
</div>

===== views\partials\create-videos.ejs =====
<div class="chat-content active" id="create-videos-tab">
    <div class="sub-content active" id="create-videos-input">
        <textarea id="video-input" class="w-full p-2 rounded bg-gray-800 border border-gray-600 text-white placeholder-gray-400 focus:outline-none focus:ring-2 focus:ring-green-500" placeholder="Enter a prompt to generate a video..."></textarea>
        <button id="video-submit" data-mode="create-videos" class="bg-green-600 hover:bg-green-700 text-white px-4 py-2 rounded transition-colors ml-2">Generate Video</button>
    </div>
</div>

===== views\partials\files.ejs =====
<div class="p-4">
    <h2 class="text-2xl font-bold mb-4">Your Files</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 gap-4">
        <% files.forEach(file => { %>
            <div class="file-card">
                <a href="<%= file.contentUrl %>">
                    <img src="<%= file.thumbnailUrl %>" alt="<%= file.prompt || 'File' %>" class="w-full h-auto">
                </a>
                <p class="text-sm text-gray-600"><%= file.prompt ? file.prompt.substring(0, 50) + '...' : 'No description' %></p>
            </div>
        <% }) %>
    </div>
    <% if (files.length === 0) { %>
        <p class="text-gray-500">No files available.</p>
    <% } %>
</div>

===== views\partials\home_content.ejs =====
<!-- views/partials/home_content.ejs -->
<div class="text-center">
    <p class="text-gray-600">Welcome to Pixzor! Explore our gallery, chat with AI, or manage your files.</p>
</div>

===== views\partials\modals.ejs =====
<style>
    /* Modal Base Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: 120;
        display: none !important; /* Ensure hidden by default */
        justify-content: center;
        align-items: center;
    }
    .modal:not(.hidden) {
        display: flex !important; /* Only show when hidden class is removed */
    }
    .modal.hidden {
        display: none !important; /* Reinforce hidden state */
        visibility: hidden; /* Prevent flash */
    }
    .modal-backdrop {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
    }
    .modal-content {
        position: relative;
        z-index: 121;
        background: #1f2937; /* Dark background to match theme */
        color: #d1d5db; /* Match text color */
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
        transition: none; /* Prevent animation flash */
    }
    #welcome-modal .modal-content,
    #about-popup .modal-content {
        background: #1f2937 !important; /* Ensure consistency */
        padding: 24px;
        border-radius: 8px;
        box-shadow: 0 4px 20px rgba(0, 0, 0, 0.6);
    }
</style>

<!-- BUY TOKENS MODAL -->
<div id="buy-tokens-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
  <div class="modal-backdrop"></div>
  <div class="modal-content w-full max-w-md mx-auto relative">
    <button
      id="close-buy-tokens-modal"
      class="absolute top-2 right-2 text-gray-400 hover:text-gray-300 text-2xl"
    >×</button>
    <h2 class="text-xl font-bold mb-4">Manage PIXZOR Credits</h2>
    <form id="buy-tokens-form" class="mb-6">
      <label for="token-bundle" class="block mb-2">Select a Credit Bundle:</label>
      <select
        id="token-bundle"
        class="w-full border rounded-lg p-2 mb-4 bg-gray-700 text-gray-200"
      >
        <option value="3" data-price="3.00">3 Credits - £3.00</option>
        <option value="5" data-price="5.00">5 Credits - £5.00</option>
        <option value="10" data-price="10.00">10 Credits - £10.00</option>
        <option value="20" data-price="20.00">20 Credits - £20.00</option>
        <option value="30" data-price="30.00">30 Credits - £30.00</option>
        <option value="50" data-price="50.00">50 Credits - £50.00</option>
        <option value="100" data-price="100.00">100 Credits - £100.00</option>
      </select>
      <button
        type="submit"
        class="w-full bg-green-600 text-white py-2 rounded-lg hover:bg-green-500"
      >
        Purchase Credits
      </button>
    </form>
  </div>
</div>

<!-- WELCOME MODAL -->
<div id="welcome-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
  <div class="modal-backdrop"></div>
  <div class="modal-content w-full max-w-md mx-auto p-6 rounded-lg shadow-lg relative">
    <button
      id="close-welcome-modal"
      class="absolute top-2 right-2 text-gray-400 hover:text-gray-300 text-2xl"
    >
      ×
    </button>
    <h2 class="text-xl font-bold mb-4">Welcome to Pixzor!</h2>
    <p class="mb-4">
      Register now to claim your <strong>$2.00 free credits</strong>...
    </p>
    <div class="flex justify-end space-x-4">
      <button
        id="close-welcome-modal-btn"
        class="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded"
      >
        Close
      </button>
      <button
        id="register-with-google"
        class="bg-green-600 hover:bg-green-500 text-white px-4 py-2 rounded"
      >
        Register with Google
      </button>
    </div>
  </div>
</div>

<!-- ABOUT POPUP -->
<div id="about-popup" class="modal hidden fixed inset-0 bg-black bg-opacity-75 z-50 flex items-center justify-center">
    <div class="modal-backdrop"></div>
    <div class="modal-content w-full max-w-md mx-auto relative p-6 rounded-lg">
        <button id="close-about-popup" class="absolute top-2 right-2 text-gray-400 hover:text-gray-300 text-2xl">×</button>
        <h2 class="text-xl font-bold mb-4">About Pixzor</h2>
        <p class="line-height-1.5 mb-4">Pixzor is an AI-powered platform designed to bring your creative ideas to life with cutting-edge tools.</p>
        <p class="line-height-1.5 mb-4"> 
            For inquiries:
            <a href="mailto:contact@pixzor.com" class="text-blue-400 hover:text-blue-300">contact@pixzor.com</a>
        </p>
        <footer class="bg-gray-900 p-4 rounded-b-lg -mx-6 -mb-6">
            <p class="line-height-1.5 mb-0">
                By using Pixzor, you agree to our
                <a id="terms-link" href="#" class="text-blue-400 hover:text-blue-300">Terms of Service</a>.
            </p>
        </footer>
        <button id="close-about-popup-btn" class="bg-red-600 hover:bg-red-500 text-white px-4 py-2 rounded block mx-auto mt-4">Close</button>
    </div>
</div>

<!-- FULLSCREEN IMAGE MODAL -->
<div id="fullscreen-modal" class="modal hidden fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-90">
  <button
    class="absolute top-4 right-6 text-white text-4xl font-bold hover:text-gray-300 z-[51]"
    onclick="closeFullscreenModal();"
  >×</button>
  <div class="relative max-w-full max-h-full p-4">
    <img id="fullscreen-image" src="" alt="Fullscreen Image" class="block max-w-full max-h-[90vh] object-contain">
  </div>
</div>

<!-- COMMENTS/DETAILS MODAL -->
<!-- COMMENTS/DETAILS MODAL -->
<div id="comments-modal" class="modal hidden fixed inset-0 bg-black bg-opacity-75 z-40">
    <div class="container mx-auto px-4 py-8">
        <div class="modal-content max-w-4xl mx-auto relative p-6 rounded-lg">
            <div class="flex justify-between items-center mb-4">
                <h2 class="text-2xl font-bold">Details</h2> 
                <button id="close-comments-modal" class="text-gray-400 hover:text-white text-2xl">
                    ×
                </button>
            </div>
            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                    <div class="relative">
                        <img id="modal-image" src="" alt="Modal Image" class="w-full rounded-lg">
                        <button id="fullscreen-icon" class="absolute top-2 left-2 bg-black bg-opacity-50 text-white p-1 rounded-full text-xs hover:bg-opacity-75 z-10" title="View Fullscreen">
                            <i class="fas fa-expand"></i>
                        </button>
                    </div>
                    <div class="mt-4">
                        <a id="download-button" href="#" download class="bg-green-600 text-white px-4 py-2 rounded w-full inline-block text-center">
                            <i class="fas fa-download mr-2"></i>Download
                        </a>
                        <div class="share-buttons flex gap-2 mt-2">
                            <a id="share-facebook" href="#" target="_blank" class="bg-blue-600 text-white p-2 rounded-full hover:bg-blue-500" title="Share on Facebook">
                                <i class="fab fa-facebook-f"></i>
                            </a>
                            <a id="share-twitter" href="#" target="_blank" class="bg-blue-400 text-white p-2 rounded-full hover:bg-blue-300" title="Share on Twitter">
                                <i class="fab fa-twitter"></i>
                            </a>
                            <a id="share-pinterest" href="#" target="_blank" class="bg-red-600 text-white p-2 rounded-full hover:bg-red-500" title="Share on Pinterest">
                                <i class="fab fa-pinterest-p"></i>
                            </a>
                        </div>
                    </div>
                </div>
                <div>
                    <div class="mb-4">
                        <h3 class="font-bold flex items-center">
                            Prompt:
                            <button id="copy-prompt" class="ml-2 text-gray-400 hover:text-white" title="Copy Prompt">
                                <i class="fas fa-copy"></i>
                            </button>
                        </h3>
                        <p id="modal-prompt" class="bg-gray-700 p-2 rounded max-h-20 overflow-y-auto"></p>
                    </div>
                    <div class="mb-4">
                        <h3 class="font-bold">Created by:</h3>
                        <p id="modal-username"></p>
                    </div>
                    <div id="model-container" class="mb-4 hidden">
                        <h3 class="font-bold">Model:</h3>
                        <p id="modal-model"></p>
                    </div>
                    <div class="flex space-x-2 mb-4">
                        <div id="delete-button-container" class="flex-1 hidden">
                            <button id="delete-button-modal" class="bg-red-600 text-white px-4 py-2 rounded w-full">
                                <i class="fas fa-trash mr-2"></i>Delete
                            </button>
                        </div>
                        <div id="share-button-container" class="flex-1 hidden">
                            <button id="share-button-modal" class="bg-gray-600 text-white px-4 py-2 rounded w-full">
                                <i class="fas fa-share-alt mr-2"></i>Share
                            </button>
                        </div>
                    </div>
                    <div class="mb-4">
                        <h3 class="font-bold">Comments:</h3>
                        <ul id="comments-list" class="space-y-2 max-h-40 overflow-y-auto border border-gray-600 p-2 rounded"></ul>
                    </div>
                    <div class="flex space-x-2">
                        <input type="text" id="comment-input" placeholder="Login to comment..." 
                               class="flex-1 bg-gray-700 rounded px-4 py-2 text-gray-200" disabled>
                        <button id="post-comment" 
                                class="bg-green-600 text-white px-4 py-2 rounded disabled:opacity-50" disabled>
                            Post
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script src="/js/payment.js"></script>

===== views\partials\_topbar.ejs =====
<!-- views/partials/_topbar.ejs -->
<header class="bg-gray-700 fixed top-0 left-0 right-0 z-40 md:ml-64">
  <div class="container mx-auto px-4 py-2 flex justify-end items-center">
    <!-- Tokens & Login on the right side -->
    <button
      id="tokens-button"
      class="flex items-center bg-gray-600 hover:bg-yellow-600 px-2 sm:px-4 py-2 rounded-lg text-sm sm:text-base"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-4 w-4 sm:h-5 sm:w-5 text-yellow-400 mr-1 sm:mr-2"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
        <path
          fill-rule="evenodd"
          d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943
          9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458
          10zM10 18a8 8 0 100-16 8 8 0 000 16z"
          clip-rule="evenodd"
        />
      </svg>
      <span id="token-count" class="text-yellow-400">- Credits</span>
    </button>
    <button
      id="google-auth-button"
      class="flex items-center bg-gray-600 hover:bg-green-600 px-3 sm:px-4 py-2 rounded-lg text-sm sm:text-base ml-4"
    >
      <div
        class="w-4 h-4 sm:w-5 sm:h-5 mr-1 sm:mr-2 rounded-full bg-gray-500 flex items-center justify-center"
      >
        <i class="fas fa-user text-white text-xs sm:text-sm"></i>
      </div>
      <span>Login</span>
    </button>
  </div>
</header>


